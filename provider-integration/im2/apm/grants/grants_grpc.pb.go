// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: grants.proto

package grants

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrantsServiceClient is the client API for GrantsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrantsServiceClient interface {
	Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error)
	UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*UpdateStateReply, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error)
	RetrieveGrantGivers(ctx context.Context, in *RetrieveGrantGiversRequest, opts ...grpc.CallOption) (*RetrieveGrantGiversReply, error)
	PostComments(ctx context.Context, in *PostCommentsRequest, opts ...grpc.CallOption) (*PostCommentsReply, error)
	DeleteComments(ctx context.Context, in *DeleteCommentsRequest, opts ...grpc.CallOption) (*DeleteCommentsReply, error)
	UpdateRequestSettings(ctx context.Context, in *UpdateRequestSettingsRequest, opts ...grpc.CallOption) (*UpdateRequestSettingsReply, error)
}

type grantsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrantsServiceClient(cc grpc.ClientConnInterface) GrantsServiceClient {
	return &grantsServiceClient{cc}
}

func (c *grantsServiceClient) Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error) {
	out := new(BrowseReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/Browse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error) {
	out := new(RetrieveReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*UpdateStateReply, error) {
	out := new(UpdateStateReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error) {
	out := new(TransferReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) RetrieveGrantGivers(ctx context.Context, in *RetrieveGrantGiversRequest, opts ...grpc.CallOption) (*RetrieveGrantGiversReply, error) {
	out := new(RetrieveGrantGiversReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/RetrieveGrantGivers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) PostComments(ctx context.Context, in *PostCommentsRequest, opts ...grpc.CallOption) (*PostCommentsReply, error) {
	out := new(PostCommentsReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/PostComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) DeleteComments(ctx context.Context, in *DeleteCommentsRequest, opts ...grpc.CallOption) (*DeleteCommentsReply, error) {
	out := new(DeleteCommentsReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/DeleteComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantsServiceClient) UpdateRequestSettings(ctx context.Context, in *UpdateRequestSettingsRequest, opts ...grpc.CallOption) (*UpdateRequestSettingsReply, error) {
	out := new(UpdateRequestSettingsReply)
	err := c.cc.Invoke(ctx, "/grants.GrantsService/UpdateRequestSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrantsServiceServer is the server API for GrantsService service.
// All implementations must embed UnimplementedGrantsServiceServer
// for forward compatibility
type GrantsServiceServer interface {
	Browse(context.Context, *BrowseRequest) (*BrowseReply, error)
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error)
	Submit(context.Context, *SubmitRequest) (*SubmitReply, error)
	UpdateState(context.Context, *UpdateStateRequest) (*UpdateStateReply, error)
	Transfer(context.Context, *TransferRequest) (*TransferReply, error)
	RetrieveGrantGivers(context.Context, *RetrieveGrantGiversRequest) (*RetrieveGrantGiversReply, error)
	PostComments(context.Context, *PostCommentsRequest) (*PostCommentsReply, error)
	DeleteComments(context.Context, *DeleteCommentsRequest) (*DeleteCommentsReply, error)
	UpdateRequestSettings(context.Context, *UpdateRequestSettingsRequest) (*UpdateRequestSettingsReply, error)
	mustEmbedUnimplementedGrantsServiceServer()
}

// UnimplementedGrantsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrantsServiceServer struct {
}

func (UnimplementedGrantsServiceServer) Browse(context.Context, *BrowseRequest) (*BrowseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Browse not implemented")
}
func (UnimplementedGrantsServiceServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedGrantsServiceServer) Submit(context.Context, *SubmitRequest) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedGrantsServiceServer) UpdateState(context.Context, *UpdateStateRequest) (*UpdateStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedGrantsServiceServer) Transfer(context.Context, *TransferRequest) (*TransferReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedGrantsServiceServer) RetrieveGrantGivers(context.Context, *RetrieveGrantGiversRequest) (*RetrieveGrantGiversReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveGrantGivers not implemented")
}
func (UnimplementedGrantsServiceServer) PostComments(context.Context, *PostCommentsRequest) (*PostCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComments not implemented")
}
func (UnimplementedGrantsServiceServer) DeleteComments(context.Context, *DeleteCommentsRequest) (*DeleteCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComments not implemented")
}
func (UnimplementedGrantsServiceServer) UpdateRequestSettings(context.Context, *UpdateRequestSettingsRequest) (*UpdateRequestSettingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequestSettings not implemented")
}
func (UnimplementedGrantsServiceServer) mustEmbedUnimplementedGrantsServiceServer() {}

// UnsafeGrantsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrantsServiceServer will
// result in compilation errors.
type UnsafeGrantsServiceServer interface {
	mustEmbedUnimplementedGrantsServiceServer()
}

func RegisterGrantsServiceServer(s grpc.ServiceRegistrar, srv GrantsServiceServer) {
	s.RegisterService(&GrantsService_ServiceDesc, srv)
}

func _GrantsService_Browse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).Browse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/Browse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).Browse(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).UpdateState(ctx, req.(*UpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_RetrieveGrantGivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveGrantGiversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).RetrieveGrantGivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/RetrieveGrantGivers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).RetrieveGrantGivers(ctx, req.(*RetrieveGrantGiversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_PostComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).PostComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/PostComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).PostComments(ctx, req.(*PostCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_DeleteComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).DeleteComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/DeleteComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).DeleteComments(ctx, req.(*DeleteCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantsService_UpdateRequestSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequestSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).UpdateRequestSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GrantsService/UpdateRequestSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).UpdateRequestSettings(ctx, req.(*UpdateRequestSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrantsService_ServiceDesc is the grpc.ServiceDesc for GrantsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrantsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grants.GrantsService",
	HandlerType: (*GrantsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Browse",
			Handler:    _GrantsService_Browse_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _GrantsService_Retrieve_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _GrantsService_Submit_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _GrantsService_UpdateState_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _GrantsService_Transfer_Handler,
		},
		{
			MethodName: "RetrieveGrantGivers",
			Handler:    _GrantsService_RetrieveGrantGivers_Handler,
		},
		{
			MethodName: "PostComments",
			Handler:    _GrantsService_PostComments_Handler,
		},
		{
			MethodName: "DeleteComments",
			Handler:    _GrantsService_DeleteComments_Handler,
		},
		{
			MethodName: "UpdateRequestSettings",
			Handler:    _GrantsService_UpdateRequestSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grants.proto",
}
