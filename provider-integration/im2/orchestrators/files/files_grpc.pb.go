// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: files.proto

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesServiceClient is the client API for FilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesServiceClient interface {
	Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	StreamingSearch(ctx context.Context, in *StreamingSearchRequest, opts ...grpc.CallOption) (FilesService_StreamingSearchClient, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error)
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error)
	CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadReply, error)
	CreateDownload(ctx context.Context, in *CreateDownloadRequest, opts ...grpc.CallOption) (*CreateDownloadReply, error)
	Trash(ctx context.Context, in *TrashRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error)
	EmptyTrash(ctx context.Context, in *EmptyTrashRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error)
}

type filesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesServiceClient(cc grpc.ClientConnInterface) FilesServiceClient {
	return &filesServiceClient{cc}
}

func (c *filesServiceClient) Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error) {
	out := new(BrowseReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/Browse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) StreamingSearch(ctx context.Context, in *StreamingSearchRequest, opts ...grpc.CallOption) (FilesService_StreamingSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &FilesService_ServiceDesc.Streams[0], "/files.FilesService/StreamingSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesServiceStreamingSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FilesService_StreamingSearchClient interface {
	Recv() (*StreamingSearchReply, error)
	grpc.ClientStream
}

type filesServiceStreamingSearchClient struct {
	grpc.ClientStream
}

func (x *filesServiceStreamingSearchClient) Recv() (*StreamingSearchReply, error) {
	m := new(StreamingSearchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesServiceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error) {
	out := new(GenericFileOperationReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error) {
	out := new(GenericFileOperationReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error) {
	out := new(GenericFileOperationReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadReply, error) {
	out := new(CreateUploadReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/CreateUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) CreateDownload(ctx context.Context, in *CreateDownloadRequest, opts ...grpc.CallOption) (*CreateDownloadReply, error) {
	out := new(CreateDownloadReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/CreateDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) Trash(ctx context.Context, in *TrashRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error) {
	out := new(GenericFileOperationReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/Trash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesServiceClient) EmptyTrash(ctx context.Context, in *EmptyTrashRequest, opts ...grpc.CallOption) (*GenericFileOperationReply, error) {
	out := new(GenericFileOperationReply)
	err := c.cc.Invoke(ctx, "/files.FilesService/EmptyTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServiceServer is the server API for FilesService service.
// All implementations must embed UnimplementedFilesServiceServer
// for forward compatibility
type FilesServiceServer interface {
	Browse(context.Context, *BrowseRequest) (*BrowseReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	StreamingSearch(*StreamingSearchRequest, FilesService_StreamingSearchServer) error
	Move(context.Context, *MoveRequest) (*GenericFileOperationReply, error)
	Copy(context.Context, *CopyRequest) (*GenericFileOperationReply, error)
	CreateFolder(context.Context, *CreateFolderRequest) (*GenericFileOperationReply, error)
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadReply, error)
	CreateDownload(context.Context, *CreateDownloadRequest) (*CreateDownloadReply, error)
	Trash(context.Context, *TrashRequest) (*GenericFileOperationReply, error)
	EmptyTrash(context.Context, *EmptyTrashRequest) (*GenericFileOperationReply, error)
	mustEmbedUnimplementedFilesServiceServer()
}

// UnimplementedFilesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServiceServer struct {
}

func (UnimplementedFilesServiceServer) Browse(context.Context, *BrowseRequest) (*BrowseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Browse not implemented")
}
func (UnimplementedFilesServiceServer) Search(context.Context, *SearchRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFilesServiceServer) StreamingSearch(*StreamingSearchRequest, FilesService_StreamingSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
}
func (UnimplementedFilesServiceServer) Move(context.Context, *MoveRequest) (*GenericFileOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFilesServiceServer) Copy(context.Context, *CopyRequest) (*GenericFileOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFilesServiceServer) CreateFolder(context.Context, *CreateFolderRequest) (*GenericFileOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFilesServiceServer) CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpload not implemented")
}
func (UnimplementedFilesServiceServer) CreateDownload(context.Context, *CreateDownloadRequest) (*CreateDownloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownload not implemented")
}
func (UnimplementedFilesServiceServer) Trash(context.Context, *TrashRequest) (*GenericFileOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trash not implemented")
}
func (UnimplementedFilesServiceServer) EmptyTrash(context.Context, *EmptyTrashRequest) (*GenericFileOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyTrash not implemented")
}
func (UnimplementedFilesServiceServer) mustEmbedUnimplementedFilesServiceServer() {}

// UnsafeFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServiceServer will
// result in compilation errors.
type UnsafeFilesServiceServer interface {
	mustEmbedUnimplementedFilesServiceServer()
}

func RegisterFilesServiceServer(s grpc.ServiceRegistrar, srv FilesServiceServer) {
	s.RegisterService(&FilesService_ServiceDesc, srv)
}

func _FilesService_Browse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).Browse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/Browse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).Browse(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_StreamingSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServiceServer).StreamingSearch(m, &filesServiceStreamingSearchServer{stream})
}

type FilesService_StreamingSearchServer interface {
	Send(*StreamingSearchReply) error
	grpc.ServerStream
}

type filesServiceStreamingSearchServer struct {
	grpc.ServerStream
}

func (x *filesServiceStreamingSearchServer) Send(m *StreamingSearchReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FilesService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_CreateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).CreateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/CreateUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).CreateUpload(ctx, req.(*CreateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_CreateDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).CreateDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/CreateDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).CreateDownload(ctx, req.(*CreateDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_Trash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).Trash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/Trash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).Trash(ctx, req.(*TrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesService_EmptyTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyTrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServiceServer).EmptyTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesService/EmptyTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServiceServer).EmptyTrash(ctx, req.(*EmptyTrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesService_ServiceDesc is the grpc.ServiceDesc for FilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.FilesService",
	HandlerType: (*FilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Browse",
			Handler:    _FilesService_Browse_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _FilesService_Search_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FilesService_Move_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FilesService_Copy_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _FilesService_CreateFolder_Handler,
		},
		{
			MethodName: "CreateUpload",
			Handler:    _FilesService_CreateUpload_Handler,
		},
		{
			MethodName: "CreateDownload",
			Handler:    _FilesService_CreateDownload_Handler,
		},
		{
			MethodName: "Trash",
			Handler:    _FilesService_Trash_Handler,
		},
		{
			MethodName: "EmptyTrash",
			Handler:    _FilesService_EmptyTrash_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSearch",
			Handler:       _FilesService_StreamingSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "files.proto",
}

// FilesProviderServiceClient is the client API for FilesProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesProviderServiceClient interface {
	Browse(ctx context.Context, in *ProviderBrowseRequest, opts ...grpc.CallOption) (*ProviderBrowseReply, error)
}

type filesProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesProviderServiceClient(cc grpc.ClientConnInterface) FilesProviderServiceClient {
	return &filesProviderServiceClient{cc}
}

func (c *filesProviderServiceClient) Browse(ctx context.Context, in *ProviderBrowseRequest, opts ...grpc.CallOption) (*ProviderBrowseReply, error) {
	out := new(ProviderBrowseReply)
	err := c.cc.Invoke(ctx, "/files.FilesProviderService/Browse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesProviderServiceServer is the server API for FilesProviderService service.
// All implementations must embed UnimplementedFilesProviderServiceServer
// for forward compatibility
type FilesProviderServiceServer interface {
	Browse(context.Context, *ProviderBrowseRequest) (*ProviderBrowseReply, error)
	mustEmbedUnimplementedFilesProviderServiceServer()
}

// UnimplementedFilesProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilesProviderServiceServer struct {
}

func (UnimplementedFilesProviderServiceServer) Browse(context.Context, *ProviderBrowseRequest) (*ProviderBrowseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Browse not implemented")
}
func (UnimplementedFilesProviderServiceServer) mustEmbedUnimplementedFilesProviderServiceServer() {}

// UnsafeFilesProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesProviderServiceServer will
// result in compilation errors.
type UnsafeFilesProviderServiceServer interface {
	mustEmbedUnimplementedFilesProviderServiceServer()
}

func RegisterFilesProviderServiceServer(s grpc.ServiceRegistrar, srv FilesProviderServiceServer) {
	s.RegisterService(&FilesProviderService_ServiceDesc, srv)
}

func _FilesProviderService_Browse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderBrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesProviderServiceServer).Browse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/files.FilesProviderService/Browse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesProviderServiceServer).Browse(ctx, req.(*ProviderBrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesProviderService_ServiceDesc is the grpc.ServiceDesc for FilesProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.FilesProviderService",
	HandlerType: (*FilesProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Browse",
			Handler:    _FilesProviderService_Browse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "files.proto",
}
