//
//The goal of UCloud's accounting system is to:
//
//1. Allow or deny access to a provider's service catalog
//2. Track consumption of resources at the workspace level
//3. Generate visualizations and reports which track historical consumption data
//
//## Allocations: Granting access to a service catalog
//
//UCloud achieves the first point by having the ability to grant resource allocations. A resource allocation
//is also known as a `WalletAllocation`. They grant a workspace the ability to use `Product`s from a
//specific `ProductCategory`. Unless otherwise stated, a workspace must always hold an allocation to use a
//product. If a workspace does not hold an allocation, then the accounting system will deny access to them.
//An allocation sets several limits on how the workspace can use the products. This includes:
//
//- An allocation is only valid for the `Product`s belonging to a single category. For example, if a
//workspace has an allocation for `u1-standard` then it does not grant access to `u1-gpu`.
//- An allocation has a start date and an end date. Outside of this period, the allocation is invalid.
//- Each allocation have an associated quota. If a workspace is using more than the quota allows, then the
//provider should deny access to the `Product`.
//
//---
//
//__üìùNOTE:__ It is the responsibility of the provider and not UCloud's accounting system to deny access
//to a resource when the quota is exceeded. UCloud assists in this process by telling providers when a
//workspace exceeds their quota. But the responsibility lies with the providers, as they usually have more
//information. UCloud will only check for the existence of a valid allocation before forwarding the request.
//
//---
//
//Resource allocations are hierarchical in UCloud. In practice, this means that all allocations can have
//either 0 or 1 parent allocation. Allocations which do not have a parent are root allocations. Only UCloud
//administrators/provider administrators can create root allocations. Administrators of a workspace can
//"sub-allocate" their own allocations. This will create a new allocation which has one of their existing
//allocations as the parent. UCloud allows for over-allocation when creating sub-allocations. UCloud avoids
//over-spending by making sure that the usage in a sub-tree doesn't exceed the quota specified in the root
//of the sub-tree. For example, consider the following sub-allocation created by a workspace administrator:
//
//![](/backend/accounting-service/wiki/allocations-2-1.png)
//
//They can even create another which is even larger.
//
//![](/backend/accounting-service/wiki/allocations-2-2.png)
//
//The sub-allocations themselves can continue to create new sub-allocations. These hierarchies can be as
//complex as they need to be.
//
//![](/backend/accounting-service/wiki/allocations-2-3.png)
//
//In the above example neither "Research 1" or "Research 2" can have a usage above 10GB due to their
//parent. Similarly, if the combined usage goes above 10GB then UCloud will lock both of the allocations.
//
//### Summary
//
//__Important concepts:__
//
//- $TYPE_REF WalletAllocation: Stores a resource allocation which grants a workspace access to a
//ProductCategory
//- $TYPE_REF Wallet: Combines multiple allocations, belonging to the same workspace for a specific category.
//The accounting system spreads out usages evenly across all allocations in a Wallet.
//- Allocations form a hierarchy. Over-allocation is allowed but the combined usage in a single allocation
//tree must not exceed the quota in the root.
//
//__Important calls:__
//
//- $callRef.rootAllocate and $callRef.subAllocate: Create new allocations.
//- $callRef.updateAllocation: Update an allocation.
//- $callRef.browseSubAllocations, $callRef.searchSubAllocations $callRef.browseAllocationsInternal: Browse
//through your sub allocations.
//- $callRef.browseWallets and $callRef.browseWalletsInternal: Browse through your wallets.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: accounting.proto

package accounting

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED ProductType = 0
	ProductType_PRODUCT_TYPE_STORAGE     ProductType = 1
	ProductType_PRODUCT_TYPE_COMPUTE     ProductType = 2
	ProductType_PRODUCT_TYPE_LICENSE     ProductType = 3
	ProductType_PRODUCT_TYPE_INGRESS     ProductType = 4
	ProductType_PRODUCT_TYPE_NETWORK_IP  ProductType = 5
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "PRODUCT_TYPE_STORAGE",
		2: "PRODUCT_TYPE_COMPUTE",
		3: "PRODUCT_TYPE_LICENSE",
		4: "PRODUCT_TYPE_INGRESS",
		5: "PRODUCT_TYPE_NETWORK_IP",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED": 0,
		"PRODUCT_TYPE_STORAGE":     1,
		"PRODUCT_TYPE_COMPUTE":     2,
		"PRODUCT_TYPE_LICENSE":     3,
		"PRODUCT_TYPE_INGRESS":     4,
		"PRODUCT_TYPE_NETWORK_IP":  5,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_accounting_proto_enumTypes[0].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_accounting_proto_enumTypes[0]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{0}
}

type AccountingFrequency int32

const (
	AccountingFrequency_ACCOUNTING_FREQUENCY_UNSPECIFIED     AccountingFrequency = 0
	AccountingFrequency_ACCOUNTING_FREQUENCY_ONCE            AccountingFrequency = 1
	AccountingFrequency_ACCOUNTING_FREQUENCY_PERIODIC_MINUTE AccountingFrequency = 2
	AccountingFrequency_ACCOUNTING_FREQUENCY_PERIODIC_HOUR   AccountingFrequency = 3
	AccountingFrequency_ACCOUNTING_FREQUENCY_PERIODIC_DAY    AccountingFrequency = 4
)

// Enum value maps for AccountingFrequency.
var (
	AccountingFrequency_name = map[int32]string{
		0: "ACCOUNTING_FREQUENCY_UNSPECIFIED",
		1: "ACCOUNTING_FREQUENCY_ONCE",
		2: "ACCOUNTING_FREQUENCY_PERIODIC_MINUTE",
		3: "ACCOUNTING_FREQUENCY_PERIODIC_HOUR",
		4: "ACCOUNTING_FREQUENCY_PERIODIC_DAY",
	}
	AccountingFrequency_value = map[string]int32{
		"ACCOUNTING_FREQUENCY_UNSPECIFIED":     0,
		"ACCOUNTING_FREQUENCY_ONCE":            1,
		"ACCOUNTING_FREQUENCY_PERIODIC_MINUTE": 2,
		"ACCOUNTING_FREQUENCY_PERIODIC_HOUR":   3,
		"ACCOUNTING_FREQUENCY_PERIODIC_DAY":    4,
	}
)

func (x AccountingFrequency) Enum() *AccountingFrequency {
	p := new(AccountingFrequency)
	*p = x
	return p
}

func (x AccountingFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountingFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_accounting_proto_enumTypes[1].Descriptor()
}

func (AccountingFrequency) Type() protoreflect.EnumType {
	return &file_accounting_proto_enumTypes[1]
}

func (x AccountingFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountingFrequency.Descriptor instead.
func (AccountingFrequency) EnumDescriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{1}
}

type QueryAllocationsRequest_AllocationType int32

const (
	QueryAllocationsRequest_ALLOCATION_TYPE_UNSPECIFIED    QueryAllocationsRequest_AllocationType = 0
	QueryAllocationsRequest_ALLOCATION_TYPE_OWN_ALLOCATION QueryAllocationsRequest_AllocationType = 1
	QueryAllocationsRequest_ALLOCATION_TYPE_SUB_ALLOCATION QueryAllocationsRequest_AllocationType = 2
)

// Enum value maps for QueryAllocationsRequest_AllocationType.
var (
	QueryAllocationsRequest_AllocationType_name = map[int32]string{
		0: "ALLOCATION_TYPE_UNSPECIFIED",
		1: "ALLOCATION_TYPE_OWN_ALLOCATION",
		2: "ALLOCATION_TYPE_SUB_ALLOCATION",
	}
	QueryAllocationsRequest_AllocationType_value = map[string]int32{
		"ALLOCATION_TYPE_UNSPECIFIED":    0,
		"ALLOCATION_TYPE_OWN_ALLOCATION": 1,
		"ALLOCATION_TYPE_SUB_ALLOCATION": 2,
	}
)

func (x QueryAllocationsRequest_AllocationType) Enum() *QueryAllocationsRequest_AllocationType {
	p := new(QueryAllocationsRequest_AllocationType)
	*p = x
	return p
}

func (x QueryAllocationsRequest_AllocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryAllocationsRequest_AllocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_accounting_proto_enumTypes[2].Descriptor()
}

func (QueryAllocationsRequest_AllocationType) Type() protoreflect.EnumType {
	return &file_accounting_proto_enumTypes[2]
}

func (x QueryAllocationsRequest_AllocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryAllocationsRequest_AllocationType.Descriptor instead.
func (QueryAllocationsRequest_AllocationType) EnumDescriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{16, 0}
}

type ReportUsageRequest_Type int32

const (
	ReportUsageRequest_TYPE_UNSPECIFIED ReportUsageRequest_Type = 0
	ReportUsageRequest_TYPE_DELTA       ReportUsageRequest_Type = 1
	ReportUsageRequest_TYPE_ABSOLUTE    ReportUsageRequest_Type = 2
)

// Enum value maps for ReportUsageRequest_Type.
var (
	ReportUsageRequest_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DELTA",
		2: "TYPE_ABSOLUTE",
	}
	ReportUsageRequest_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_DELTA":       1,
		"TYPE_ABSOLUTE":    2,
	}
)

func (x ReportUsageRequest_Type) Enum() *ReportUsageRequest_Type {
	p := new(ReportUsageRequest_Type)
	*p = x
	return p
}

func (x ReportUsageRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportUsageRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_accounting_proto_enumTypes[3].Descriptor()
}

func (ReportUsageRequest_Type) Type() protoreflect.EnumType {
	return &file_accounting_proto_enumTypes[3]
}

func (x ReportUsageRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportUsageRequest_Type.Descriptor instead.
func (ReportUsageRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{18, 0}
}

type ProductCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Provider            string              `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	ProductType         ProductType         `protobuf:"varint,3,opt,name=product_type,json=productType,proto3,enum=accounting.ProductType" json:"product_type,omitempty"`
	AccountingUnit      *AccountingUnit     `protobuf:"bytes,4,opt,name=accounting_unit,json=accountingUnit,proto3" json:"accounting_unit,omitempty"`
	AccountingFrequency AccountingFrequency `protobuf:"varint,5,opt,name=accounting_frequency,json=accountingFrequency,proto3,enum=accounting.AccountingFrequency" json:"accounting_frequency,omitempty"`
	FreeToUse           bool                `protobuf:"varint,6,opt,name=free_to_use,json=freeToUse,proto3" json:"free_to_use,omitempty"`
}

func (x *ProductCategory) Reset() {
	*x = ProductCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategory) ProtoMessage() {}

func (x *ProductCategory) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategory.ProtoReflect.Descriptor instead.
func (*ProductCategory) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{0}
}

func (x *ProductCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategory) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ProductCategory) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *ProductCategory) GetAccountingUnit() *AccountingUnit {
	if x != nil {
		return x.AccountingUnit
	}
	return nil
}

func (x *ProductCategory) GetAccountingFrequency() AccountingFrequency {
	if x != nil {
		return x.AccountingFrequency
	}
	return AccountingFrequency_ACCOUNTING_FREQUENCY_UNSPECIFIED
}

func (x *ProductCategory) GetFreeToUse() bool {
	if x != nil {
		return x.FreeToUse
	}
	return false
}

type AccountingUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NamePlural             string `protobuf:"bytes,2,opt,name=name_plural,json=namePlural,proto3" json:"name_plural,omitempty"`
	FloatingPoint          bool   `protobuf:"varint,3,opt,name=floating_point,json=floatingPoint,proto3" json:"floating_point,omitempty"`
	DisplayFrequencySuffix bool   `protobuf:"varint,4,opt,name=display_frequency_suffix,json=displayFrequencySuffix,proto3" json:"display_frequency_suffix,omitempty"`
}

func (x *AccountingUnit) Reset() {
	*x = AccountingUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingUnit) ProtoMessage() {}

func (x *AccountingUnit) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingUnit.ProtoReflect.Descriptor instead.
func (*AccountingUnit) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{1}
}

func (x *AccountingUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountingUnit) GetNamePlural() string {
	if x != nil {
		return x.NamePlural
	}
	return ""
}

func (x *AccountingUnit) GetFloatingPoint() bool {
	if x != nil {
		return x.FloatingPoint
	}
	return false
}

func (x *AccountingUnit) GetDisplayFrequencySuffix() bool {
	if x != nil {
		return x.DisplayFrequencySuffix
	}
	return false
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Category                  *ProductCategory `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Price                     int64            `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Description               string           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	HiddenInGrantApplications bool             `protobuf:"varint,5,opt,name=hidden_in_grant_applications,json=hiddenInGrantApplications,proto3" json:"hidden_in_grant_applications,omitempty"`
	// Types that are assignable to Specification:
	//
	//	*Product_Compute_
	//	*Product_Storage_
	//	*Product_PublicLink_
	//	*Product_PublicIp
	//	*Product_License_
	Specification isProduct_Specification `protobuf_oneof:"specification"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2}
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetCategory() *ProductCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Product) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetHiddenInGrantApplications() bool {
	if x != nil {
		return x.HiddenInGrantApplications
	}
	return false
}

func (m *Product) GetSpecification() isProduct_Specification {
	if m != nil {
		return m.Specification
	}
	return nil
}

func (x *Product) GetCompute() *Product_Compute {
	if x, ok := x.GetSpecification().(*Product_Compute_); ok {
		return x.Compute
	}
	return nil
}

func (x *Product) GetStorage() *Product_Storage {
	if x, ok := x.GetSpecification().(*Product_Storage_); ok {
		return x.Storage
	}
	return nil
}

func (x *Product) GetPublicLink() *Product_PublicLink {
	if x, ok := x.GetSpecification().(*Product_PublicLink_); ok {
		return x.PublicLink
	}
	return nil
}

func (x *Product) GetPublicIp() *Product_PublicIP {
	if x, ok := x.GetSpecification().(*Product_PublicIp); ok {
		return x.PublicIp
	}
	return nil
}

func (x *Product) GetLicense() *Product_License {
	if x, ok := x.GetSpecification().(*Product_License_); ok {
		return x.License
	}
	return nil
}

type isProduct_Specification interface {
	isProduct_Specification()
}

type Product_Compute_ struct {
	Compute *Product_Compute `protobuf:"bytes,6,opt,name=compute,proto3,oneof"`
}

type Product_Storage_ struct {
	Storage *Product_Storage `protobuf:"bytes,7,opt,name=storage,proto3,oneof"`
}

type Product_PublicLink_ struct {
	PublicLink *Product_PublicLink `protobuf:"bytes,8,opt,name=public_link,json=publicLink,proto3,oneof"`
}

type Product_PublicIp struct {
	PublicIp *Product_PublicIP `protobuf:"bytes,9,opt,name=public_ip,json=publicIp,proto3,oneof"`
}

type Product_License_ struct {
	License *Product_License `protobuf:"bytes,10,opt,name=license,proto3,oneof"`
}

func (*Product_Compute_) isProduct_Specification() {}

func (*Product_Storage_) isProduct_Specification() {}

func (*Product_PublicLink_) isProduct_Specification() {}

func (*Product_PublicIp) isProduct_Specification() {}

func (*Product_License_) isProduct_Specification() {}

type ProductReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ProductReference) Reset() {
	*x = ProductReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductReference) ProtoMessage() {}

func (x *ProductReference) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductReference.ProtoReflect.Descriptor instead.
func (*ProductReference) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{3}
}

func (x *ProductReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductReference) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ProductReference) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type WalletAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TreeUsage                     int64 `protobuf:"varint,2,opt,name=tree_usage,json=treeUsage,proto3" json:"tree_usage,omitempty"`
	LocalUsage                    int64 `protobuf:"varint,3,opt,name=local_usage,json=localUsage,proto3" json:"local_usage,omitempty"`
	Quota                         int64 `protobuf:"varint,4,opt,name=quota,proto3" json:"quota,omitempty"`
	StartDate                     int64 `protobuf:"varint,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate                       int64 `protobuf:"varint,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	CanAllocate                   bool  `protobuf:"varint,7,opt,name=can_allocate,json=canAllocate,proto3" json:"can_allocate,omitempty"`
	AllowSubAllocationsToAllocate bool  `protobuf:"varint,8,opt,name=allow_sub_allocations_to_allocate,json=allowSubAllocationsToAllocate,proto3" json:"allow_sub_allocations_to_allocate,omitempty"`
	GrantedIn                     int64 `protobuf:"varint,9,opt,name=granted_in,json=grantedIn,proto3" json:"granted_in,omitempty"`
	CategoryIndex                 int32 `protobuf:"varint,10,opt,name=category_index,json=categoryIndex,proto3" json:"category_index,omitempty"`
	OwnerIndex                    int32 `protobuf:"varint,11,opt,name=owner_index,json=ownerIndex,proto3" json:"owner_index,omitempty"`
}

func (x *WalletAllocation) Reset() {
	*x = WalletAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletAllocation) ProtoMessage() {}

func (x *WalletAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletAllocation.ProtoReflect.Descriptor instead.
func (*WalletAllocation) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{4}
}

func (x *WalletAllocation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WalletAllocation) GetTreeUsage() int64 {
	if x != nil {
		return x.TreeUsage
	}
	return 0
}

func (x *WalletAllocation) GetLocalUsage() int64 {
	if x != nil {
		return x.LocalUsage
	}
	return 0
}

func (x *WalletAllocation) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *WalletAllocation) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *WalletAllocation) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *WalletAllocation) GetCanAllocate() bool {
	if x != nil {
		return x.CanAllocate
	}
	return false
}

func (x *WalletAllocation) GetAllowSubAllocationsToAllocate() bool {
	if x != nil {
		return x.AllowSubAllocationsToAllocate
	}
	return false
}

func (x *WalletAllocation) GetGrantedIn() int64 {
	if x != nil {
		return x.GrantedIn
	}
	return 0
}

func (x *WalletAllocation) GetCategoryIndex() int32 {
	if x != nil {
		return x.CategoryIndex
	}
	return 0
}

func (x *WalletAllocation) GetOwnerIndex() int32 {
	if x != nil {
		return x.OwnerIndex
	}
	return 0
}

type UsageOverTimeDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage     int64 `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`
	Quota     int64 `protobuf:"varint,2,opt,name=quota,proto3" json:"quota,omitempty"`
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *UsageOverTimeDataPoint) Reset() {
	*x = UsageOverTimeDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageOverTimeDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageOverTimeDataPoint) ProtoMessage() {}

func (x *UsageOverTimeDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageOverTimeDataPoint.ProtoReflect.Descriptor instead.
func (*UsageOverTimeDataPoint) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{5}
}

func (x *UsageOverTimeDataPoint) GetUsage() int64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *UsageOverTimeDataPoint) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *UsageOverTimeDataPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type UsageOverTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UsageOverTimeDataPoint `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UsageOverTime) Reset() {
	*x = UsageOverTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageOverTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageOverTime) ProtoMessage() {}

func (x *UsageOverTime) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageOverTime.ProtoReflect.Descriptor instead.
func (*UsageOverTime) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{6}
}

func (x *UsageOverTime) GetData() []*UsageOverTimeDataPoint {
	if x != nil {
		return x.Data
	}
	return nil
}

type BreakdownByProjectPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Usage     int64  `protobuf:"varint,3,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *BreakdownByProjectPoint) Reset() {
	*x = BreakdownByProjectPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakdownByProjectPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakdownByProjectPoint) ProtoMessage() {}

func (x *BreakdownByProjectPoint) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakdownByProjectPoint.ProtoReflect.Descriptor instead.
func (*BreakdownByProjectPoint) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{7}
}

func (x *BreakdownByProjectPoint) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BreakdownByProjectPoint) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BreakdownByProjectPoint) GetUsage() int64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type BreakdownByProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BreakdownByProjectPoint `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BreakdownByProject) Reset() {
	*x = BreakdownByProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakdownByProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakdownByProject) ProtoMessage() {}

func (x *BreakdownByProject) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakdownByProject.ProtoReflect.Descriptor instead.
func (*BreakdownByProject) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{8}
}

func (x *BreakdownByProject) GetData() []*BreakdownByProjectPoint {
	if x != nil {
		return x.Data
	}
	return nil
}

type Charts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories  []*ProductCategory   `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Allocations []*WalletAllocation  `protobuf:"bytes,2,rep,name=allocations,proto3" json:"allocations,omitempty"`
	Charts      []*ChartsForCategory `protobuf:"bytes,3,rep,name=charts,proto3" json:"charts,omitempty"`
}

func (x *Charts) Reset() {
	*x = Charts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Charts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charts) ProtoMessage() {}

func (x *Charts) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charts.ProtoReflect.Descriptor instead.
func (*Charts) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{9}
}

func (x *Charts) GetCategories() []*ProductCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Charts) GetAllocations() []*WalletAllocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *Charts) GetCharts() []*ChartsForCategory {
	if x != nil {
		return x.Charts
	}
	return nil
}

type ChartsForCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIndex      int32               `protobuf:"varint,1,opt,name=category_index,json=categoryIndex,proto3" json:"category_index,omitempty"`
	OverTime           *UsageOverTime      `protobuf:"bytes,2,opt,name=over_time,json=overTime,proto3" json:"over_time,omitempty"`
	BreakdownByProject *BreakdownByProject `protobuf:"bytes,3,opt,name=breakdown_by_project,json=breakdownByProject,proto3" json:"breakdown_by_project,omitempty"`
}

func (x *ChartsForCategory) Reset() {
	*x = ChartsForCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsForCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsForCategory) ProtoMessage() {}

func (x *ChartsForCategory) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsForCategory.ProtoReflect.Descriptor instead.
func (*ChartsForCategory) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{10}
}

func (x *ChartsForCategory) GetCategoryIndex() int32 {
	if x != nil {
		return x.CategoryIndex
	}
	return 0
}

func (x *ChartsForCategory) GetOverTime() *UsageOverTime {
	if x != nil {
		return x.OverTime
	}
	return nil
}

func (x *ChartsForCategory) GetBreakdownByProject() *BreakdownByProject {
	if x != nil {
		return x.BreakdownByProject
	}
	return nil
}

type ProductCategoryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ProductCategoryId) Reset() {
	*x = ProductCategoryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryId) ProtoMessage() {}

func (x *ProductCategoryId) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryId.ProtoReflect.Descriptor instead.
func (*ProductCategoryId) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{11}
}

func (x *ProductCategoryId) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ProductCategoryId) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

// Request and response types
// =====================================================================================================================
type RootAllocateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RootAllocateRequest_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RootAllocateRequest) Reset() {
	*x = RootAllocateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootAllocateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootAllocateRequest) ProtoMessage() {}

func (x *RootAllocateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootAllocateRequest.ProtoReflect.Descriptor instead.
func (*RootAllocateRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{12}
}

func (x *RootAllocateRequest) GetItems() []*RootAllocateRequest_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type RootAllocateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RootAllocateReply) Reset() {
	*x = RootAllocateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootAllocateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootAllocateReply) ProtoMessage() {}

func (x *RootAllocateReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootAllocateReply.ProtoReflect.Descriptor instead.
func (*RootAllocateReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{13}
}

type UpdateAllocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*UpdateAllocationsRequest_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UpdateAllocationsRequest) Reset() {
	*x = UpdateAllocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllocationsRequest) ProtoMessage() {}

func (x *UpdateAllocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllocationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateAllocationsRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateAllocationsRequest) GetItems() []*UpdateAllocationsRequest_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateAllocationsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAllocationsReply) Reset() {
	*x = UpdateAllocationsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllocationsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllocationsReply) ProtoMessage() {}

func (x *UpdateAllocationsReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllocationsReply.ProtoReflect.Descriptor instead.
func (*UpdateAllocationsReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{15}
}

type QueryAllocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemsPerPage   int32                                    `protobuf:"varint,1,opt,name=items_per_page,json=itemsPerPage,proto3" json:"items_per_page,omitempty"`
	Next           string                                   `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	RequestedTypes []QueryAllocationsRequest_AllocationType `protobuf:"varint,3,rep,packed,name=requested_types,json=requestedTypes,proto3,enum=accounting.QueryAllocationsRequest_AllocationType" json:"requested_types,omitempty"`
	Query          *string                                  `protobuf:"bytes,4,opt,name=query,proto3,oneof" json:"query,omitempty"`
	FilterType     *ProductType                             `protobuf:"varint,5,opt,name=filter_type,json=filterType,proto3,enum=accounting.ProductType,oneof" json:"filter_type,omitempty"`
	FilterOwner    *string                                  `protobuf:"bytes,6,opt,name=filter_owner,json=filterOwner,proto3,oneof" json:"filter_owner,omitempty"`
	FilterCategory *ProductCategory                         `protobuf:"bytes,7,opt,name=filter_category,json=filterCategory,proto3,oneof" json:"filter_category,omitempty"`
}

func (x *QueryAllocationsRequest) Reset() {
	*x = QueryAllocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllocationsRequest) ProtoMessage() {}

func (x *QueryAllocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllocationsRequest.ProtoReflect.Descriptor instead.
func (*QueryAllocationsRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{16}
}

func (x *QueryAllocationsRequest) GetItemsPerPage() int32 {
	if x != nil {
		return x.ItemsPerPage
	}
	return 0
}

func (x *QueryAllocationsRequest) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *QueryAllocationsRequest) GetRequestedTypes() []QueryAllocationsRequest_AllocationType {
	if x != nil {
		return x.RequestedTypes
	}
	return nil
}

func (x *QueryAllocationsRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *QueryAllocationsRequest) GetFilterType() ProductType {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *QueryAllocationsRequest) GetFilterOwner() string {
	if x != nil && x.FilterOwner != nil {
		return *x.FilterOwner
	}
	return ""
}

func (x *QueryAllocationsRequest) GetFilterCategory() *ProductCategory {
	if x != nil {
		return x.FilterCategory
	}
	return nil
}

type QueryAllocationsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next        *string                        `protobuf:"bytes,1,opt,name=next,proto3,oneof" json:"next,omitempty"`
	Allocations []*WalletAllocation            `protobuf:"bytes,2,rep,name=allocations,proto3" json:"allocations,omitempty"`
	Categories  []*ProductCategory             `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
	Owners      []*QueryAllocationsReply_Owner `protobuf:"bytes,4,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *QueryAllocationsReply) Reset() {
	*x = QueryAllocationsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllocationsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllocationsReply) ProtoMessage() {}

func (x *QueryAllocationsReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllocationsReply.ProtoReflect.Descriptor instead.
func (*QueryAllocationsReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{17}
}

func (x *QueryAllocationsReply) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *QueryAllocationsReply) GetAllocations() []*WalletAllocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *QueryAllocationsReply) GetCategories() []*ProductCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *QueryAllocationsReply) GetOwners() []*QueryAllocationsReply_Owner {
	if x != nil {
		return x.Owners
	}
	return nil
}

type ReportUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ReportUsageRequest_Type    `protobuf:"varint,1,opt,name=type,proto3,enum=accounting.ReportUsageRequest_Type" json:"type,omitempty"`
	Items []*ReportUsageRequest_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReportUsageRequest) Reset() {
	*x = ReportUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUsageRequest) ProtoMessage() {}

func (x *ReportUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUsageRequest.ProtoReflect.Descriptor instead.
func (*ReportUsageRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{18}
}

func (x *ReportUsageRequest) GetType() ReportUsageRequest_Type {
	if x != nil {
		return x.Type
	}
	return ReportUsageRequest_TYPE_UNSPECIFIED
}

func (x *ReportUsageRequest) GetItems() []*ReportUsageRequest_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReportUsageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldContinue []bool `protobuf:"varint,1,rep,packed,name=should_continue,json=shouldContinue,proto3" json:"should_continue,omitempty"`
}

func (x *ReportUsageReply) Reset() {
	*x = ReportUsageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUsageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUsageReply) ProtoMessage() {}

func (x *ReportUsageReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUsageReply.ProtoReflect.Descriptor instead.
func (*ReportUsageReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{19}
}

func (x *ReportUsageReply) GetShouldContinue() []bool {
	if x != nil {
		return x.ShouldContinue
	}
	return nil
}

type QueryProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *QueryProvidersRequest) Reset() {
	*x = QueryProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProvidersRequest) ProtoMessage() {}

func (x *QueryProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProvidersRequest.ProtoReflect.Descriptor instead.
func (*QueryProvidersRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{20}
}

func (x *QueryProvidersRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type QueryProvidersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers []string `protobuf:"bytes,2,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *QueryProvidersReply) Reset() {
	*x = QueryProvidersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProvidersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProvidersReply) ProtoMessage() {}

func (x *QueryProvidersReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProvidersReply.ProtoReflect.Descriptor instead.
func (*QueryProvidersReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{21}
}

func (x *QueryProvidersReply) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

type RetrieveChartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *RetrieveChartsRequest) Reset() {
	*x = RetrieveChartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveChartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveChartsRequest) ProtoMessage() {}

func (x *RetrieveChartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveChartsRequest.ProtoReflect.Descriptor instead.
func (*RetrieveChartsRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{22}
}

func (x *RetrieveChartsRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RetrieveChartsRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type CreateProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *CreateProductsRequest) Reset() {
	*x = CreateProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductsRequest) ProtoMessage() {}

func (x *CreateProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductsRequest.ProtoReflect.Descriptor instead.
func (*CreateProductsRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{23}
}

func (x *CreateProductsRequest) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type CreateProductsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateProductsReply) Reset() {
	*x = CreateProductsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProductsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductsReply) ProtoMessage() {}

func (x *CreateProductsReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductsReply.ProtoReflect.Descriptor instead.
func (*CreateProductsReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{24}
}

type BrowseProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemsPerPage   int32        `protobuf:"varint,1,opt,name=items_per_page,json=itemsPerPage,proto3" json:"items_per_page,omitempty"`
	Next           string       `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	FilterName     *string      `protobuf:"bytes,3,opt,name=filter_name,json=filterName,proto3,oneof" json:"filter_name,omitempty"`
	FilterCategory *string      `protobuf:"bytes,4,opt,name=filter_category,json=filterCategory,proto3,oneof" json:"filter_category,omitempty"`
	FilterProvider *string      `protobuf:"bytes,5,opt,name=filter_provider,json=filterProvider,proto3,oneof" json:"filter_provider,omitempty"`
	FilterType     *ProductType `protobuf:"varint,6,opt,name=filter_type,json=filterType,proto3,enum=accounting.ProductType,oneof" json:"filter_type,omitempty"`
	IncludeBalance bool         `protobuf:"varint,7,opt,name=include_balance,json=includeBalance,proto3" json:"include_balance,omitempty"`
}

func (x *BrowseProductsRequest) Reset() {
	*x = BrowseProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseProductsRequest) ProtoMessage() {}

func (x *BrowseProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseProductsRequest.ProtoReflect.Descriptor instead.
func (*BrowseProductsRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{25}
}

func (x *BrowseProductsRequest) GetItemsPerPage() int32 {
	if x != nil {
		return x.ItemsPerPage
	}
	return 0
}

func (x *BrowseProductsRequest) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *BrowseProductsRequest) GetFilterName() string {
	if x != nil && x.FilterName != nil {
		return *x.FilterName
	}
	return ""
}

func (x *BrowseProductsRequest) GetFilterCategory() string {
	if x != nil && x.FilterCategory != nil {
		return *x.FilterCategory
	}
	return ""
}

func (x *BrowseProductsRequest) GetFilterProvider() string {
	if x != nil && x.FilterProvider != nil {
		return *x.FilterProvider
	}
	return ""
}

func (x *BrowseProductsRequest) GetFilterType() ProductType {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *BrowseProductsRequest) GetIncludeBalance() bool {
	if x != nil {
		return x.IncludeBalance
	}
	return false
}

type BrowseProductsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next     string     `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Products []*Product `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	Balances []int64    `protobuf:"varint,3,rep,packed,name=balances,proto3" json:"balances,omitempty"`
}

func (x *BrowseProductsReply) Reset() {
	*x = BrowseProductsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseProductsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseProductsReply) ProtoMessage() {}

func (x *BrowseProductsReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseProductsReply.ProtoReflect.Descriptor instead.
func (*BrowseProductsReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{26}
}

func (x *BrowseProductsReply) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

func (x *BrowseProductsReply) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *BrowseProductsReply) GetBalances() []int64 {
	if x != nil {
		return x.Balances
	}
	return nil
}

type FetchNewAllocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchNewAllocationsRequest) Reset() {
	*x = FetchNewAllocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNewAllocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNewAllocationsRequest) ProtoMessage() {}

func (x *FetchNewAllocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNewAllocationsRequest.ProtoReflect.Descriptor instead.
func (*FetchNewAllocationsRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{27}
}

type FetchNewAllocationsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocations []*WalletAllocation `protobuf:"bytes,1,rep,name=allocations,proto3" json:"allocations,omitempty"`
	Owners      []string            `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
	Categories  []*ProductCategory  `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *FetchNewAllocationsReply) Reset() {
	*x = FetchNewAllocationsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNewAllocationsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNewAllocationsReply) ProtoMessage() {}

func (x *FetchNewAllocationsReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNewAllocationsReply.ProtoReflect.Descriptor instead.
func (*FetchNewAllocationsReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{28}
}

func (x *FetchNewAllocationsReply) GetAllocations() []*WalletAllocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *FetchNewAllocationsReply) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *FetchNewAllocationsReply) GetCategories() []*ProductCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type MarkAllocationsAsHandledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MarkAllocationsAsHandledRequest) Reset() {
	*x = MarkAllocationsAsHandledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAllocationsAsHandledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAllocationsAsHandledRequest) ProtoMessage() {}

func (x *MarkAllocationsAsHandledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAllocationsAsHandledRequest.ProtoReflect.Descriptor instead.
func (*MarkAllocationsAsHandledRequest) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{29}
}

func (x *MarkAllocationsAsHandledRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type MarkAllocationsAsHandledReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkAllocationsAsHandledReply) Reset() {
	*x = MarkAllocationsAsHandledReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAllocationsAsHandledReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAllocationsAsHandledReply) ProtoMessage() {}

func (x *MarkAllocationsAsHandledReply) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAllocationsAsHandledReply.ProtoReflect.Descriptor instead.
func (*MarkAllocationsAsHandledReply) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{30}
}

type Product_Compute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu          int32  `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	MemoryInGigs int32  `protobuf:"varint,2,opt,name=memory_in_gigs,json=memoryInGigs,proto3" json:"memory_in_gigs,omitempty"`
	Gpu          int32  `protobuf:"varint,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
	CpuModel     string `protobuf:"bytes,4,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	MemoryModel  string `protobuf:"bytes,5,opt,name=memory_model,json=memoryModel,proto3" json:"memory_model,omitempty"`
	GpuModel     string `protobuf:"bytes,6,opt,name=gpu_model,json=gpuModel,proto3" json:"gpu_model,omitempty"`
}

func (x *Product_Compute) Reset() {
	*x = Product_Compute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Compute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Compute) ProtoMessage() {}

func (x *Product_Compute) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Compute.ProtoReflect.Descriptor instead.
func (*Product_Compute) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Product_Compute) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Product_Compute) GetMemoryInGigs() int32 {
	if x != nil {
		return x.MemoryInGigs
	}
	return 0
}

func (x *Product_Compute) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *Product_Compute) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *Product_Compute) GetMemoryModel() string {
	if x != nil {
		return x.MemoryModel
	}
	return ""
}

func (x *Product_Compute) GetGpuModel() string {
	if x != nil {
		return x.GpuModel
	}
	return ""
}

type Product_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Product_Storage) Reset() {
	*x = Product_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_Storage) ProtoMessage() {}

func (x *Product_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_Storage.ProtoReflect.Descriptor instead.
func (*Product_Storage) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2, 1}
}

type Product_PublicLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Product_PublicLink) Reset() {
	*x = Product_PublicLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_PublicLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_PublicLink) ProtoMessage() {}

func (x *Product_PublicLink) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_PublicLink.ProtoReflect.Descriptor instead.
func (*Product_PublicLink) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2, 2}
}

type Product_PublicIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Product_PublicIP) Reset() {
	*x = Product_PublicIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_PublicIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_PublicIP) ProtoMessage() {}

func (x *Product_PublicIP) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_PublicIP.ProtoReflect.Descriptor instead.
func (*Product_PublicIP) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2, 3}
}

type Product_License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Product_License) Reset() {
	*x = Product_License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product_License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product_License) ProtoMessage() {}

func (x *Product_License) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product_License.ProtoReflect.Descriptor instead.
func (*Product_License) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Product_License) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RootAllocateRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Category   *ProductCategoryId `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Quota      int64              `protobuf:"varint,3,opt,name=quota,proto3" json:"quota,omitempty"`
	Start      int64              `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End        int64              `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	ForcedSync *bool              `protobuf:"varint,6,opt,name=forced_sync,json=forcedSync,proto3,oneof" json:"forced_sync,omitempty"`
}

func (x *RootAllocateRequest_Item) Reset() {
	*x = RootAllocateRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootAllocateRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootAllocateRequest_Item) ProtoMessage() {}

func (x *RootAllocateRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootAllocateRequest_Item.ProtoReflect.Descriptor instead.
func (*RootAllocateRequest_Item) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{12, 0}
}

func (x *RootAllocateRequest_Item) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RootAllocateRequest_Item) GetCategory() *ProductCategoryId {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *RootAllocateRequest_Item) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *RootAllocateRequest_Item) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RootAllocateRequest_Item) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *RootAllocateRequest_Item) GetForcedSync() bool {
	if x != nil && x.ForcedSync != nil {
		return *x.ForcedSync
	}
	return false
}

type UpdateAllocationsRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocationId int64  `protobuf:"varint,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	Reason       string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	NewQuota     *int64 `protobuf:"varint,3,opt,name=new_quota,json=newQuota,proto3,oneof" json:"new_quota,omitempty"`
	NewStart     *int64 `protobuf:"varint,4,opt,name=new_start,json=newStart,proto3,oneof" json:"new_start,omitempty"`
	NewEnd       *int64 `protobuf:"varint,5,opt,name=new_end,json=newEnd,proto3,oneof" json:"new_end,omitempty"`
}

func (x *UpdateAllocationsRequest_Item) Reset() {
	*x = UpdateAllocationsRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllocationsRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllocationsRequest_Item) ProtoMessage() {}

func (x *UpdateAllocationsRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllocationsRequest_Item.ProtoReflect.Descriptor instead.
func (*UpdateAllocationsRequest_Item) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{14, 0}
}

func (x *UpdateAllocationsRequest_Item) GetAllocationId() int64 {
	if x != nil {
		return x.AllocationId
	}
	return 0
}

func (x *UpdateAllocationsRequest_Item) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateAllocationsRequest_Item) GetNewQuota() int64 {
	if x != nil && x.NewQuota != nil {
		return *x.NewQuota
	}
	return 0
}

func (x *UpdateAllocationsRequest_Item) GetNewStart() int64 {
	if x != nil && x.NewStart != nil {
		return *x.NewStart
	}
	return 0
}

func (x *UpdateAllocationsRequest_Item) GetNewEnd() int64 {
	if x != nil && x.NewEnd != nil {
		return *x.NewEnd
	}
	return 0
}

type QueryAllocationsReply_Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsProject  bool   `protobuf:"varint,2,opt,name=is_project,json=isProject,proto3" json:"is_project,omitempty"`
	Title      string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	PiUsername string `protobuf:"bytes,4,opt,name=pi_username,json=piUsername,proto3" json:"pi_username,omitempty"`
}

func (x *QueryAllocationsReply_Owner) Reset() {
	*x = QueryAllocationsReply_Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllocationsReply_Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllocationsReply_Owner) ProtoMessage() {}

func (x *QueryAllocationsReply_Owner) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllocationsReply_Owner.ProtoReflect.Descriptor instead.
func (*QueryAllocationsReply_Owner) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{17, 0}
}

func (x *QueryAllocationsReply_Owner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryAllocationsReply_Owner) GetIsProject() bool {
	if x != nil {
		return x.IsProject
	}
	return false
}

func (x *QueryAllocationsReply_Owner) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryAllocationsReply_Owner) GetPiUsername() string {
	if x != nil {
		return x.PiUsername
	}
	return ""
}

type ReportUsageRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner    string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Category *ProductCategoryId `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Usage    int64              `protobuf:"varint,3,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *ReportUsageRequest_Item) Reset() {
	*x = ReportUsageRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUsageRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUsageRequest_Item) ProtoMessage() {}

func (x *ReportUsageRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUsageRequest_Item.ProtoReflect.Descriptor instead.
func (*ReportUsageRequest_Item) Descriptor() ([]byte, []int) {
	return file_accounting_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ReportUsageRequest_Item) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ReportUsageRequest_Item) GetCategory() *ProductCategoryId {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ReportUsageRequest_Item) GetUsage() int64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

var File_accounting_proto protoreflect.FileDescriptor

var file_accounting_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xb6,
	0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x22, 0x82, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49,
	0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x48, 0x00, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0xb0, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x47, 0x69, 0x67,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x67, 0x70, 0x75, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x09, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x0c, 0x0a, 0x0a, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x0a, 0x0a, 0x08, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x50, 0x1a, 0x1d, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x72, 0x65, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x75, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x62,
	0x0a, 0x16, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x47, 0x0a, 0x0d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x17, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x4d, 0x0a, 0x12, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xbc, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x22,
	0xc4, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x12, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x4b, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x24, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x53, 0x79,
	0x6e, 0x63, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xab, 0x02, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xcd, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0xb7, 0x04, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x03, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x22, 0x79, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4c, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xe6, 0x02, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x06,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x6d, 0x0a,
	0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x69, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x1a, 0x6d, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x02,
	0x22, 0x3b, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x22, 0x2d, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x3f, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x48, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x15, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x83, 0x03, 0x0a, 0x15, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x13, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xaf, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x33, 0x0a, 0x1f, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0xb0, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53,
	0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x2a, 0xd3, 0x01, 0x0a, 0x13, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x49, 0x43, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x04,
	0x32, 0xd5, 0x07, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x54, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x0e, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x63, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x4e, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x12, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x39, 0x0a, 0x1d, 0x64, 0x6b, 0x2e, 0x73,
	0x64, 0x75, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x18, 0x75, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6b, 0x2f, 0x61, 0x70, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_accounting_proto_rawDescOnce sync.Once
	file_accounting_proto_rawDescData = file_accounting_proto_rawDesc
)

func file_accounting_proto_rawDescGZIP() []byte {
	file_accounting_proto_rawDescOnce.Do(func() {
		file_accounting_proto_rawDescData = protoimpl.X.CompressGZIP(file_accounting_proto_rawDescData)
	})
	return file_accounting_proto_rawDescData
}

var file_accounting_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_accounting_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_accounting_proto_goTypes = []interface{}{
	(ProductType)(0),                            // 0: accounting.ProductType
	(AccountingFrequency)(0),                    // 1: accounting.AccountingFrequency
	(QueryAllocationsRequest_AllocationType)(0), // 2: accounting.QueryAllocationsRequest.AllocationType
	(ReportUsageRequest_Type)(0),                // 3: accounting.ReportUsageRequest.Type
	(*ProductCategory)(nil),                     // 4: accounting.ProductCategory
	(*AccountingUnit)(nil),                      // 5: accounting.AccountingUnit
	(*Product)(nil),                             // 6: accounting.Product
	(*ProductReference)(nil),                    // 7: accounting.ProductReference
	(*WalletAllocation)(nil),                    // 8: accounting.WalletAllocation
	(*UsageOverTimeDataPoint)(nil),              // 9: accounting.UsageOverTimeDataPoint
	(*UsageOverTime)(nil),                       // 10: accounting.UsageOverTime
	(*BreakdownByProjectPoint)(nil),             // 11: accounting.BreakdownByProjectPoint
	(*BreakdownByProject)(nil),                  // 12: accounting.BreakdownByProject
	(*Charts)(nil),                              // 13: accounting.Charts
	(*ChartsForCategory)(nil),                   // 14: accounting.ChartsForCategory
	(*ProductCategoryId)(nil),                   // 15: accounting.ProductCategoryId
	(*RootAllocateRequest)(nil),                 // 16: accounting.RootAllocateRequest
	(*RootAllocateReply)(nil),                   // 17: accounting.RootAllocateReply
	(*UpdateAllocationsRequest)(nil),            // 18: accounting.UpdateAllocationsRequest
	(*UpdateAllocationsReply)(nil),              // 19: accounting.UpdateAllocationsReply
	(*QueryAllocationsRequest)(nil),             // 20: accounting.QueryAllocationsRequest
	(*QueryAllocationsReply)(nil),               // 21: accounting.QueryAllocationsReply
	(*ReportUsageRequest)(nil),                  // 22: accounting.ReportUsageRequest
	(*ReportUsageReply)(nil),                    // 23: accounting.ReportUsageReply
	(*QueryProvidersRequest)(nil),               // 24: accounting.QueryProvidersRequest
	(*QueryProvidersReply)(nil),                 // 25: accounting.QueryProvidersReply
	(*RetrieveChartsRequest)(nil),               // 26: accounting.RetrieveChartsRequest
	(*CreateProductsRequest)(nil),               // 27: accounting.CreateProductsRequest
	(*CreateProductsReply)(nil),                 // 28: accounting.CreateProductsReply
	(*BrowseProductsRequest)(nil),               // 29: accounting.BrowseProductsRequest
	(*BrowseProductsReply)(nil),                 // 30: accounting.BrowseProductsReply
	(*FetchNewAllocationsRequest)(nil),          // 31: accounting.FetchNewAllocationsRequest
	(*FetchNewAllocationsReply)(nil),            // 32: accounting.FetchNewAllocationsReply
	(*MarkAllocationsAsHandledRequest)(nil),     // 33: accounting.MarkAllocationsAsHandledRequest
	(*MarkAllocationsAsHandledReply)(nil),       // 34: accounting.MarkAllocationsAsHandledReply
	(*Product_Compute)(nil),                     // 35: accounting.Product.Compute
	(*Product_Storage)(nil),                     // 36: accounting.Product.Storage
	(*Product_PublicLink)(nil),                  // 37: accounting.Product.PublicLink
	(*Product_PublicIP)(nil),                    // 38: accounting.Product.PublicIP
	(*Product_License)(nil),                     // 39: accounting.Product.License
	(*RootAllocateRequest_Item)(nil),            // 40: accounting.RootAllocateRequest.Item
	(*UpdateAllocationsRequest_Item)(nil),       // 41: accounting.UpdateAllocationsRequest.Item
	(*QueryAllocationsReply_Owner)(nil),         // 42: accounting.QueryAllocationsReply.Owner
	(*ReportUsageRequest_Item)(nil),             // 43: accounting.ReportUsageRequest.Item
}
var file_accounting_proto_depIdxs = []int32{
	0,  // 0: accounting.ProductCategory.product_type:type_name -> accounting.ProductType
	5,  // 1: accounting.ProductCategory.accounting_unit:type_name -> accounting.AccountingUnit
	1,  // 2: accounting.ProductCategory.accounting_frequency:type_name -> accounting.AccountingFrequency
	4,  // 3: accounting.Product.category:type_name -> accounting.ProductCategory
	35, // 4: accounting.Product.compute:type_name -> accounting.Product.Compute
	36, // 5: accounting.Product.storage:type_name -> accounting.Product.Storage
	37, // 6: accounting.Product.public_link:type_name -> accounting.Product.PublicLink
	38, // 7: accounting.Product.public_ip:type_name -> accounting.Product.PublicIP
	39, // 8: accounting.Product.license:type_name -> accounting.Product.License
	9,  // 9: accounting.UsageOverTime.data:type_name -> accounting.UsageOverTimeDataPoint
	11, // 10: accounting.BreakdownByProject.data:type_name -> accounting.BreakdownByProjectPoint
	4,  // 11: accounting.Charts.categories:type_name -> accounting.ProductCategory
	8,  // 12: accounting.Charts.allocations:type_name -> accounting.WalletAllocation
	14, // 13: accounting.Charts.charts:type_name -> accounting.ChartsForCategory
	10, // 14: accounting.ChartsForCategory.over_time:type_name -> accounting.UsageOverTime
	12, // 15: accounting.ChartsForCategory.breakdown_by_project:type_name -> accounting.BreakdownByProject
	40, // 16: accounting.RootAllocateRequest.items:type_name -> accounting.RootAllocateRequest.Item
	41, // 17: accounting.UpdateAllocationsRequest.items:type_name -> accounting.UpdateAllocationsRequest.Item
	2,  // 18: accounting.QueryAllocationsRequest.requested_types:type_name -> accounting.QueryAllocationsRequest.AllocationType
	0,  // 19: accounting.QueryAllocationsRequest.filter_type:type_name -> accounting.ProductType
	4,  // 20: accounting.QueryAllocationsRequest.filter_category:type_name -> accounting.ProductCategory
	8,  // 21: accounting.QueryAllocationsReply.allocations:type_name -> accounting.WalletAllocation
	4,  // 22: accounting.QueryAllocationsReply.categories:type_name -> accounting.ProductCategory
	42, // 23: accounting.QueryAllocationsReply.owners:type_name -> accounting.QueryAllocationsReply.Owner
	3,  // 24: accounting.ReportUsageRequest.type:type_name -> accounting.ReportUsageRequest.Type
	43, // 25: accounting.ReportUsageRequest.items:type_name -> accounting.ReportUsageRequest.Item
	6,  // 26: accounting.CreateProductsRequest.products:type_name -> accounting.Product
	0,  // 27: accounting.BrowseProductsRequest.filter_type:type_name -> accounting.ProductType
	6,  // 28: accounting.BrowseProductsReply.products:type_name -> accounting.Product
	8,  // 29: accounting.FetchNewAllocationsReply.allocations:type_name -> accounting.WalletAllocation
	4,  // 30: accounting.FetchNewAllocationsReply.categories:type_name -> accounting.ProductCategory
	15, // 31: accounting.RootAllocateRequest.Item.category:type_name -> accounting.ProductCategoryId
	15, // 32: accounting.ReportUsageRequest.Item.category:type_name -> accounting.ProductCategoryId
	16, // 33: accounting.AccountingService.RootAllocate:input_type -> accounting.RootAllocateRequest
	18, // 34: accounting.AccountingService.UpdateAllocations:input_type -> accounting.UpdateAllocationsRequest
	20, // 35: accounting.AccountingService.QueryAllocations:input_type -> accounting.QueryAllocationsRequest
	22, // 36: accounting.AccountingService.ReportUsage:input_type -> accounting.ReportUsageRequest
	24, // 37: accounting.AccountingService.QueryProviders:input_type -> accounting.QueryProvidersRequest
	26, // 38: accounting.AccountingService.RetrieveCharts:input_type -> accounting.RetrieveChartsRequest
	27, // 39: accounting.AccountingService.CreateProducts:input_type -> accounting.CreateProductsRequest
	7,  // 40: accounting.AccountingService.RetrieveProduct:input_type -> accounting.ProductReference
	29, // 41: accounting.AccountingService.BrowseProducts:input_type -> accounting.BrowseProductsRequest
	31, // 42: accounting.AccountingService.FetchNewAllocations:input_type -> accounting.FetchNewAllocationsRequest
	33, // 43: accounting.AccountingService.MarkAllocationsAsHandled:input_type -> accounting.MarkAllocationsAsHandledRequest
	17, // 44: accounting.AccountingService.RootAllocate:output_type -> accounting.RootAllocateReply
	19, // 45: accounting.AccountingService.UpdateAllocations:output_type -> accounting.UpdateAllocationsReply
	21, // 46: accounting.AccountingService.QueryAllocations:output_type -> accounting.QueryAllocationsReply
	23, // 47: accounting.AccountingService.ReportUsage:output_type -> accounting.ReportUsageReply
	25, // 48: accounting.AccountingService.QueryProviders:output_type -> accounting.QueryProvidersReply
	13, // 49: accounting.AccountingService.RetrieveCharts:output_type -> accounting.Charts
	28, // 50: accounting.AccountingService.CreateProducts:output_type -> accounting.CreateProductsReply
	6,  // 51: accounting.AccountingService.RetrieveProduct:output_type -> accounting.Product
	30, // 52: accounting.AccountingService.BrowseProducts:output_type -> accounting.BrowseProductsReply
	32, // 53: accounting.AccountingService.FetchNewAllocations:output_type -> accounting.FetchNewAllocationsReply
	34, // 54: accounting.AccountingService.MarkAllocationsAsHandled:output_type -> accounting.MarkAllocationsAsHandledReply
	44, // [44:55] is the sub-list for method output_type
	33, // [33:44] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_accounting_proto_init() }
func file_accounting_proto_init() {
	if File_accounting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_accounting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountingUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageOverTimeDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageOverTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakdownByProjectPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakdownByProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Charts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsForCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootAllocateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootAllocateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllocationsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllocationsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUsageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProvidersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveChartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProductsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseProductsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNewAllocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNewAllocationsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAllocationsAsHandledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAllocationsAsHandledReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Compute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_PublicLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_PublicIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product_License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootAllocateRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllocationsRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllocationsReply_Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUsageRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_accounting_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Product_Compute_)(nil),
		(*Product_Storage_)(nil),
		(*Product_PublicLink_)(nil),
		(*Product_PublicIp)(nil),
		(*Product_License_)(nil),
	}
	file_accounting_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_accounting_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_accounting_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_accounting_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_accounting_proto_msgTypes[37].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accounting_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_accounting_proto_goTypes,
		DependencyIndexes: file_accounting_proto_depIdxs,
		EnumInfos:         file_accounting_proto_enumTypes,
		MessageInfos:      file_accounting_proto_msgTypes,
	}.Build()
	File_accounting_proto = out.File
	file_accounting_proto_rawDesc = nil
	file_accounting_proto_goTypes = nil
	file_accounting_proto_depIdxs = nil
}
