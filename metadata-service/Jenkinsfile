def initialize() {

  try {
    stage('build metadata-service') {
      sh '''cd metadata-service
      ./gradlew clean
      ./gradlew build -x test'''
    }
  } catch (e) {
    echo "Build Failed"
    return currentBuild.result ?: 'FAILURE'
  } finally {
    publishHTML([allowmissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'metadata-service/build/reports/detekt', reportFiles: 'detekt.html', reportName: 'metadata-service-detekt-Report', reportTitles: ''])
  }

  try {
    stage('test metadata-service') {
      sh '''cd metadata-service
      ./gradlew test'''
    } 
  } catch (e) {
    echo "Test FAILED"
    return currentBuild.result ?: 'UNSTABLE'
  }

  //SAVED FOR WHEN DockerServer = 18
  /*try {
    stage("dockerizing") {
      container('docker') {
        withCredentials([
          usernamePassword(
                    credentialsId: "archiva",
                    usernameVariable: "ESCIENCE_MVN_USER",
                    passwordVariable: "ESCIENCE_MVN_PASSWORD"
          ),
          string(credentialsId: "Repository", variable: "Repository")
        ]) {
          String versionString = sh(script: '''grep "version '.*'" metadata-service/build.gradle''', returnStdout: true)
          String name = sh(script: '''grep "rootProject" metadata-service/settings.gradle | cut -c 21- | rev | cut -f 2 -d "'" | rev''', returnStdout: true).trim()
          dash = versionString.indexOf("-")
          if (dash == -1) {
            dash = versionString.length -1
          }
          String version = versionString.substring(versionString.indexOf("'")+1, dash)

          sh """
              cd metadata-service 
              docker build \
              --target production \
              --build-arg GRADLE_PROPS="eScienceCloudRepository=${Repository}\n eScienceCloudUser=${ESCIENCE_MVN_USER}\n eScienceCloudPassword=${ESCIENCE_MVN_PASSWORD}" \
              --build-arg SERVICE_NAME="${name}" \
              -t "${name}:${version}" \
              .
          """
        }
      }
    }
  } catch (e) {
    echo "Docker failed"
    return currentBuild.result ?: 'FAILURE'
  }*/
  return currentBuild.result ?: 'SUCCESS'
}

return this