// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: projects.proto

package projects

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error)
	Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	ToggleArchive(ctx context.Context, in *ToggleArchiveRequest, opts ...grpc.CallOption) (*ToggleArchiveReply, error)
	ToggleFavorite(ctx context.Context, in *ToggleFavoriteRequest, opts ...grpc.CallOption) (*ToggleArchiveReply, error)
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsReply, error)
	RetrieveAllUsersGroup(ctx context.Context, in *RetrieveAllUsersGroupRequest, opts ...grpc.CallOption) (*RetrieveAllUsersGroupReply, error)
	RenameProject(ctx context.Context, in *RenameProjectRequest, opts ...grpc.CallOption) (*RenameProjectReply, error)
	BrowseInvitations(ctx context.Context, in *BrowseInvitationsRequest, opts ...grpc.CallOption) (*BrowseInvitationsReply, error)
	CreateInvitations(ctx context.Context, in *CreateInvitationsRequest, opts ...grpc.CallOption) (*CreateInvitationsReply, error)
	DeleteInvitations(ctx context.Context, in *DeleteInvitationsRequest, opts ...grpc.CallOption) (*DeleteInvitationsReply, error)
	AcceptInvitations(ctx context.Context, in *AcceptInvitationsRequest, opts ...grpc.CallOption) (*AcceptInvitationsReply, error)
	CreateInviteLinks(ctx context.Context, in *CreateInviteLinksRequest, opts ...grpc.CallOption) (*CreateInviteLinksReply, error)
	BrowseInviteLinks(ctx context.Context, in *BrowseInviteLinksRequest, opts ...grpc.CallOption) (*BrowseInviteLinksReply, error)
	UpdateInviteLinks(ctx context.Context, in *UpdateInviteLinksRequest, opts ...grpc.CallOption) (*UpdateInviteLinksReply, error)
	RetrieveInvliteLink(ctx context.Context, in *RetrieveInvliteLinkRequest, opts ...grpc.CallOption) (*InviteLink, error)
	AcceptInviteLink(ctx context.Context, in *AcceptInviteLinkRequest, opts ...grpc.CallOption) (*AcceptInviteLinkReply, error)
	UpdateRoleOfMembers(ctx context.Context, in *UpdateRoleOfMembersRequest, opts ...grpc.CallOption) (*UpdateRoleOfMembersReply, error)
	RemoveMemberFromProject(ctx context.Context, in *RemoveMemberFromProjectRequest, opts ...grpc.CallOption) (*RemoveMemberFromProjectReply, error)
	CreateGroups(ctx context.Context, in *CreateGroupsRequest, opts ...grpc.CallOption) (*CreateGroupsReply, error)
	RenameGroups(ctx context.Context, in *RenameGroupsRequest, opts ...grpc.CallOption) (*RenameGroupsReply, error)
	DeleteGroups(ctx context.Context, in *DeleteGroupsRequest, opts ...grpc.CallOption) (*DeleteGroupsReply, error)
	CreateGroupMembers(ctx context.Context, in *CreateGroupMembersRequest, opts ...grpc.CallOption) (*CreateGroupMembersReply, error)
	DeleteGroupMembers(ctx context.Context, in *DeleteGroupMembersRequest, opts ...grpc.CallOption) (*DeleteGroupMembersReply, error)
	RetrieveProviderProject(ctx context.Context, in *RetrieveProviderProjectRequest, opts ...grpc.CallOption) (*RetrieveProviderProjectReply, error)
	RetrieveProjectNotifications(ctx context.Context, in *RetrieveProjectNotificationsRequest, opts ...grpc.CallOption) (*RetrieveProviderProjectReply, error)
	MarkProjectNotificationsAsHandled(ctx context.Context, in *MarkProjectNotificationsAsHandledRequest, opts ...grpc.CallOption) (*MarkProjectNotificationsAsHandledReply, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error) {
	out := new(RetrieveReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error) {
	out := new(BrowseReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/Browse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ToggleArchive(ctx context.Context, in *ToggleArchiveRequest, opts ...grpc.CallOption) (*ToggleArchiveReply, error) {
	out := new(ToggleArchiveReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/ToggleArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ToggleFavorite(ctx context.Context, in *ToggleFavoriteRequest, opts ...grpc.CallOption) (*ToggleArchiveReply, error) {
	out := new(ToggleArchiveReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/ToggleFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsReply, error) {
	out := new(UpdateSettingsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RetrieveAllUsersGroup(ctx context.Context, in *RetrieveAllUsersGroupRequest, opts ...grpc.CallOption) (*RetrieveAllUsersGroupReply, error) {
	out := new(RetrieveAllUsersGroupReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/RetrieveAllUsersGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RenameProject(ctx context.Context, in *RenameProjectRequest, opts ...grpc.CallOption) (*RenameProjectReply, error) {
	out := new(RenameProjectReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/RenameProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) BrowseInvitations(ctx context.Context, in *BrowseInvitationsRequest, opts ...grpc.CallOption) (*BrowseInvitationsReply, error) {
	out := new(BrowseInvitationsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/BrowseInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateInvitations(ctx context.Context, in *CreateInvitationsRequest, opts ...grpc.CallOption) (*CreateInvitationsReply, error) {
	out := new(CreateInvitationsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/CreateInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteInvitations(ctx context.Context, in *DeleteInvitationsRequest, opts ...grpc.CallOption) (*DeleteInvitationsReply, error) {
	out := new(DeleteInvitationsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/DeleteInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AcceptInvitations(ctx context.Context, in *AcceptInvitationsRequest, opts ...grpc.CallOption) (*AcceptInvitationsReply, error) {
	out := new(AcceptInvitationsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/AcceptInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateInviteLinks(ctx context.Context, in *CreateInviteLinksRequest, opts ...grpc.CallOption) (*CreateInviteLinksReply, error) {
	out := new(CreateInviteLinksReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/CreateInviteLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) BrowseInviteLinks(ctx context.Context, in *BrowseInviteLinksRequest, opts ...grpc.CallOption) (*BrowseInviteLinksReply, error) {
	out := new(BrowseInviteLinksReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/BrowseInviteLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateInviteLinks(ctx context.Context, in *UpdateInviteLinksRequest, opts ...grpc.CallOption) (*UpdateInviteLinksReply, error) {
	out := new(UpdateInviteLinksReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/UpdateInviteLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RetrieveInvliteLink(ctx context.Context, in *RetrieveInvliteLinkRequest, opts ...grpc.CallOption) (*InviteLink, error) {
	out := new(InviteLink)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/RetrieveInvliteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AcceptInviteLink(ctx context.Context, in *AcceptInviteLinkRequest, opts ...grpc.CallOption) (*AcceptInviteLinkReply, error) {
	out := new(AcceptInviteLinkReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/AcceptInviteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateRoleOfMembers(ctx context.Context, in *UpdateRoleOfMembersRequest, opts ...grpc.CallOption) (*UpdateRoleOfMembersReply, error) {
	out := new(UpdateRoleOfMembersReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/UpdateRoleOfMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RemoveMemberFromProject(ctx context.Context, in *RemoveMemberFromProjectRequest, opts ...grpc.CallOption) (*RemoveMemberFromProjectReply, error) {
	out := new(RemoveMemberFromProjectReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/RemoveMemberFromProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateGroups(ctx context.Context, in *CreateGroupsRequest, opts ...grpc.CallOption) (*CreateGroupsReply, error) {
	out := new(CreateGroupsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/CreateGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RenameGroups(ctx context.Context, in *RenameGroupsRequest, opts ...grpc.CallOption) (*RenameGroupsReply, error) {
	out := new(RenameGroupsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/RenameGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteGroups(ctx context.Context, in *DeleteGroupsRequest, opts ...grpc.CallOption) (*DeleteGroupsReply, error) {
	out := new(DeleteGroupsReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/DeleteGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateGroupMembers(ctx context.Context, in *CreateGroupMembersRequest, opts ...grpc.CallOption) (*CreateGroupMembersReply, error) {
	out := new(CreateGroupMembersReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/CreateGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteGroupMembers(ctx context.Context, in *DeleteGroupMembersRequest, opts ...grpc.CallOption) (*DeleteGroupMembersReply, error) {
	out := new(DeleteGroupMembersReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/DeleteGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RetrieveProviderProject(ctx context.Context, in *RetrieveProviderProjectRequest, opts ...grpc.CallOption) (*RetrieveProviderProjectReply, error) {
	out := new(RetrieveProviderProjectReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/RetrieveProviderProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RetrieveProjectNotifications(ctx context.Context, in *RetrieveProjectNotificationsRequest, opts ...grpc.CallOption) (*RetrieveProviderProjectReply, error) {
	out := new(RetrieveProviderProjectReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/RetrieveProjectNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) MarkProjectNotificationsAsHandled(ctx context.Context, in *MarkProjectNotificationsAsHandledRequest, opts ...grpc.CallOption) (*MarkProjectNotificationsAsHandledReply, error) {
	out := new(MarkProjectNotificationsAsHandledReply)
	err := c.cc.Invoke(ctx, "/projects.ProjectService/MarkProjectNotificationsAsHandled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error)
	Browse(context.Context, *BrowseRequest) (*BrowseReply, error)
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	ToggleArchive(context.Context, *ToggleArchiveRequest) (*ToggleArchiveReply, error)
	ToggleFavorite(context.Context, *ToggleFavoriteRequest) (*ToggleArchiveReply, error)
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsReply, error)
	RetrieveAllUsersGroup(context.Context, *RetrieveAllUsersGroupRequest) (*RetrieveAllUsersGroupReply, error)
	RenameProject(context.Context, *RenameProjectRequest) (*RenameProjectReply, error)
	BrowseInvitations(context.Context, *BrowseInvitationsRequest) (*BrowseInvitationsReply, error)
	CreateInvitations(context.Context, *CreateInvitationsRequest) (*CreateInvitationsReply, error)
	DeleteInvitations(context.Context, *DeleteInvitationsRequest) (*DeleteInvitationsReply, error)
	AcceptInvitations(context.Context, *AcceptInvitationsRequest) (*AcceptInvitationsReply, error)
	CreateInviteLinks(context.Context, *CreateInviteLinksRequest) (*CreateInviteLinksReply, error)
	BrowseInviteLinks(context.Context, *BrowseInviteLinksRequest) (*BrowseInviteLinksReply, error)
	UpdateInviteLinks(context.Context, *UpdateInviteLinksRequest) (*UpdateInviteLinksReply, error)
	RetrieveInvliteLink(context.Context, *RetrieveInvliteLinkRequest) (*InviteLink, error)
	AcceptInviteLink(context.Context, *AcceptInviteLinkRequest) (*AcceptInviteLinkReply, error)
	UpdateRoleOfMembers(context.Context, *UpdateRoleOfMembersRequest) (*UpdateRoleOfMembersReply, error)
	RemoveMemberFromProject(context.Context, *RemoveMemberFromProjectRequest) (*RemoveMemberFromProjectReply, error)
	CreateGroups(context.Context, *CreateGroupsRequest) (*CreateGroupsReply, error)
	RenameGroups(context.Context, *RenameGroupsRequest) (*RenameGroupsReply, error)
	DeleteGroups(context.Context, *DeleteGroupsRequest) (*DeleteGroupsReply, error)
	CreateGroupMembers(context.Context, *CreateGroupMembersRequest) (*CreateGroupMembersReply, error)
	DeleteGroupMembers(context.Context, *DeleteGroupMembersRequest) (*DeleteGroupMembersReply, error)
	RetrieveProviderProject(context.Context, *RetrieveProviderProjectRequest) (*RetrieveProviderProjectReply, error)
	RetrieveProjectNotifications(context.Context, *RetrieveProjectNotificationsRequest) (*RetrieveProviderProjectReply, error)
	MarkProjectNotificationsAsHandled(context.Context, *MarkProjectNotificationsAsHandledRequest) (*MarkProjectNotificationsAsHandledReply, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedProjectServiceServer) Browse(context.Context, *BrowseRequest) (*BrowseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Browse not implemented")
}
func (UnimplementedProjectServiceServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectServiceServer) ToggleArchive(context.Context, *ToggleArchiveRequest) (*ToggleArchiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleArchive not implemented")
}
func (UnimplementedProjectServiceServer) ToggleFavorite(context.Context, *ToggleFavoriteRequest) (*ToggleArchiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFavorite not implemented")
}
func (UnimplementedProjectServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedProjectServiceServer) RetrieveAllUsersGroup(context.Context, *RetrieveAllUsersGroupRequest) (*RetrieveAllUsersGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAllUsersGroup not implemented")
}
func (UnimplementedProjectServiceServer) RenameProject(context.Context, *RenameProjectRequest) (*RenameProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameProject not implemented")
}
func (UnimplementedProjectServiceServer) BrowseInvitations(context.Context, *BrowseInvitationsRequest) (*BrowseInvitationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseInvitations not implemented")
}
func (UnimplementedProjectServiceServer) CreateInvitations(context.Context, *CreateInvitationsRequest) (*CreateInvitationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitations not implemented")
}
func (UnimplementedProjectServiceServer) DeleteInvitations(context.Context, *DeleteInvitationsRequest) (*DeleteInvitationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitations not implemented")
}
func (UnimplementedProjectServiceServer) AcceptInvitations(context.Context, *AcceptInvitationsRequest) (*AcceptInvitationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitations not implemented")
}
func (UnimplementedProjectServiceServer) CreateInviteLinks(context.Context, *CreateInviteLinksRequest) (*CreateInviteLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteLinks not implemented")
}
func (UnimplementedProjectServiceServer) BrowseInviteLinks(context.Context, *BrowseInviteLinksRequest) (*BrowseInviteLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseInviteLinks not implemented")
}
func (UnimplementedProjectServiceServer) UpdateInviteLinks(context.Context, *UpdateInviteLinksRequest) (*UpdateInviteLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInviteLinks not implemented")
}
func (UnimplementedProjectServiceServer) RetrieveInvliteLink(context.Context, *RetrieveInvliteLinkRequest) (*InviteLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvliteLink not implemented")
}
func (UnimplementedProjectServiceServer) AcceptInviteLink(context.Context, *AcceptInviteLinkRequest) (*AcceptInviteLinkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInviteLink not implemented")
}
func (UnimplementedProjectServiceServer) UpdateRoleOfMembers(context.Context, *UpdateRoleOfMembersRequest) (*UpdateRoleOfMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleOfMembers not implemented")
}
func (UnimplementedProjectServiceServer) RemoveMemberFromProject(context.Context, *RemoveMemberFromProjectRequest) (*RemoveMemberFromProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromProject not implemented")
}
func (UnimplementedProjectServiceServer) CreateGroups(context.Context, *CreateGroupsRequest) (*CreateGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroups not implemented")
}
func (UnimplementedProjectServiceServer) RenameGroups(context.Context, *RenameGroupsRequest) (*RenameGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameGroups not implemented")
}
func (UnimplementedProjectServiceServer) DeleteGroups(context.Context, *DeleteGroupsRequest) (*DeleteGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroups not implemented")
}
func (UnimplementedProjectServiceServer) CreateGroupMembers(context.Context, *CreateGroupMembersRequest) (*CreateGroupMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupMembers not implemented")
}
func (UnimplementedProjectServiceServer) DeleteGroupMembers(context.Context, *DeleteGroupMembersRequest) (*DeleteGroupMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupMembers not implemented")
}
func (UnimplementedProjectServiceServer) RetrieveProviderProject(context.Context, *RetrieveProviderProjectRequest) (*RetrieveProviderProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveProviderProject not implemented")
}
func (UnimplementedProjectServiceServer) RetrieveProjectNotifications(context.Context, *RetrieveProjectNotificationsRequest) (*RetrieveProviderProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveProjectNotifications not implemented")
}
func (UnimplementedProjectServiceServer) MarkProjectNotificationsAsHandled(context.Context, *MarkProjectNotificationsAsHandledRequest) (*MarkProjectNotificationsAsHandledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkProjectNotificationsAsHandled not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Browse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Browse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/Browse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Browse(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ToggleArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ToggleArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/ToggleArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ToggleArchive(ctx, req.(*ToggleArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ToggleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ToggleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/ToggleFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ToggleFavorite(ctx, req.(*ToggleFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RetrieveAllUsersGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAllUsersGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RetrieveAllUsersGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/RetrieveAllUsersGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RetrieveAllUsersGroup(ctx, req.(*RetrieveAllUsersGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RenameProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RenameProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/RenameProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RenameProject(ctx, req.(*RenameProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_BrowseInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).BrowseInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/BrowseInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).BrowseInvitations(ctx, req.(*BrowseInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/CreateInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateInvitations(ctx, req.(*CreateInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/DeleteInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteInvitations(ctx, req.(*DeleteInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AcceptInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AcceptInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/AcceptInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AcceptInvitations(ctx, req.(*AcceptInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateInviteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateInviteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/CreateInviteLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateInviteLinks(ctx, req.(*CreateInviteLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_BrowseInviteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseInviteLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).BrowseInviteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/BrowseInviteLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).BrowseInviteLinks(ctx, req.(*BrowseInviteLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateInviteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInviteLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateInviteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/UpdateInviteLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateInviteLinks(ctx, req.(*UpdateInviteLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RetrieveInvliteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveInvliteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RetrieveInvliteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/RetrieveInvliteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RetrieveInvliteLink(ctx, req.(*RetrieveInvliteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AcceptInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AcceptInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/AcceptInviteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AcceptInviteLink(ctx, req.(*AcceptInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateRoleOfMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleOfMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateRoleOfMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/UpdateRoleOfMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateRoleOfMembers(ctx, req.(*UpdateRoleOfMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RemoveMemberFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RemoveMemberFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/RemoveMemberFromProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RemoveMemberFromProject(ctx, req.(*RemoveMemberFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/CreateGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateGroups(ctx, req.(*CreateGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RenameGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RenameGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/RenameGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RenameGroups(ctx, req.(*RenameGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/DeleteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteGroups(ctx, req.(*DeleteGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/CreateGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateGroupMembers(ctx, req.(*CreateGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/DeleteGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteGroupMembers(ctx, req.(*DeleteGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RetrieveProviderProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveProviderProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RetrieveProviderProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/RetrieveProviderProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RetrieveProviderProject(ctx, req.(*RetrieveProviderProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RetrieveProjectNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveProjectNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RetrieveProjectNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/RetrieveProjectNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RetrieveProjectNotifications(ctx, req.(*RetrieveProjectNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_MarkProjectNotificationsAsHandled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkProjectNotificationsAsHandledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).MarkProjectNotificationsAsHandled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.ProjectService/MarkProjectNotificationsAsHandled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).MarkProjectNotificationsAsHandled(ctx, req.(*MarkProjectNotificationsAsHandledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projects.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Retrieve",
			Handler:    _ProjectService_Retrieve_Handler,
		},
		{
			MethodName: "Browse",
			Handler:    _ProjectService_Browse_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ProjectService_Create_Handler,
		},
		{
			MethodName: "ToggleArchive",
			Handler:    _ProjectService_ToggleArchive_Handler,
		},
		{
			MethodName: "ToggleFavorite",
			Handler:    _ProjectService_ToggleFavorite_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _ProjectService_UpdateSettings_Handler,
		},
		{
			MethodName: "RetrieveAllUsersGroup",
			Handler:    _ProjectService_RetrieveAllUsersGroup_Handler,
		},
		{
			MethodName: "RenameProject",
			Handler:    _ProjectService_RenameProject_Handler,
		},
		{
			MethodName: "BrowseInvitations",
			Handler:    _ProjectService_BrowseInvitations_Handler,
		},
		{
			MethodName: "CreateInvitations",
			Handler:    _ProjectService_CreateInvitations_Handler,
		},
		{
			MethodName: "DeleteInvitations",
			Handler:    _ProjectService_DeleteInvitations_Handler,
		},
		{
			MethodName: "AcceptInvitations",
			Handler:    _ProjectService_AcceptInvitations_Handler,
		},
		{
			MethodName: "CreateInviteLinks",
			Handler:    _ProjectService_CreateInviteLinks_Handler,
		},
		{
			MethodName: "BrowseInviteLinks",
			Handler:    _ProjectService_BrowseInviteLinks_Handler,
		},
		{
			MethodName: "UpdateInviteLinks",
			Handler:    _ProjectService_UpdateInviteLinks_Handler,
		},
		{
			MethodName: "RetrieveInvliteLink",
			Handler:    _ProjectService_RetrieveInvliteLink_Handler,
		},
		{
			MethodName: "AcceptInviteLink",
			Handler:    _ProjectService_AcceptInviteLink_Handler,
		},
		{
			MethodName: "UpdateRoleOfMembers",
			Handler:    _ProjectService_UpdateRoleOfMembers_Handler,
		},
		{
			MethodName: "RemoveMemberFromProject",
			Handler:    _ProjectService_RemoveMemberFromProject_Handler,
		},
		{
			MethodName: "CreateGroups",
			Handler:    _ProjectService_CreateGroups_Handler,
		},
		{
			MethodName: "RenameGroups",
			Handler:    _ProjectService_RenameGroups_Handler,
		},
		{
			MethodName: "DeleteGroups",
			Handler:    _ProjectService_DeleteGroups_Handler,
		},
		{
			MethodName: "CreateGroupMembers",
			Handler:    _ProjectService_CreateGroupMembers_Handler,
		},
		{
			MethodName: "DeleteGroupMembers",
			Handler:    _ProjectService_DeleteGroupMembers_Handler,
		},
		{
			MethodName: "RetrieveProviderProject",
			Handler:    _ProjectService_RetrieveProviderProject_Handler,
		},
		{
			MethodName: "RetrieveProjectNotifications",
			Handler:    _ProjectService_RetrieveProjectNotifications_Handler,
		},
		{
			MethodName: "MarkProjectNotificationsAsHandled",
			Handler:    _ProjectService_MarkProjectNotificationsAsHandled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projects.proto",
}
