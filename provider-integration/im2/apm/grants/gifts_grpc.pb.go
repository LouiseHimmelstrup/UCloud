// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: gifts.proto

package grants

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GiftsServiceClient is the client API for GiftsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiftsServiceClient interface {
	CreateGifts(ctx context.Context, in *CreateGiftsRequest, opts ...grpc.CallOption) (*CreateGiftsReply, error)
	DeleteGifts(ctx context.Context, in *DeleteGiftsRequest, opts ...grpc.CallOption) (*DeleteGiftsReply, error)
	ClaimGifts(ctx context.Context, in *ClaimGiftsRequest, opts ...grpc.CallOption) (*ClaimGiftsReply, error)
	BrowseGifts(ctx context.Context, in *BrowseGiftsRequest, opts ...grpc.CallOption) (*BrowseGiftsReply, error)
}

type giftsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGiftsServiceClient(cc grpc.ClientConnInterface) GiftsServiceClient {
	return &giftsServiceClient{cc}
}

func (c *giftsServiceClient) CreateGifts(ctx context.Context, in *CreateGiftsRequest, opts ...grpc.CallOption) (*CreateGiftsReply, error) {
	out := new(CreateGiftsReply)
	err := c.cc.Invoke(ctx, "/grants.GiftsService/CreateGifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftsServiceClient) DeleteGifts(ctx context.Context, in *DeleteGiftsRequest, opts ...grpc.CallOption) (*DeleteGiftsReply, error) {
	out := new(DeleteGiftsReply)
	err := c.cc.Invoke(ctx, "/grants.GiftsService/DeleteGifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftsServiceClient) ClaimGifts(ctx context.Context, in *ClaimGiftsRequest, opts ...grpc.CallOption) (*ClaimGiftsReply, error) {
	out := new(ClaimGiftsReply)
	err := c.cc.Invoke(ctx, "/grants.GiftsService/ClaimGifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftsServiceClient) BrowseGifts(ctx context.Context, in *BrowseGiftsRequest, opts ...grpc.CallOption) (*BrowseGiftsReply, error) {
	out := new(BrowseGiftsReply)
	err := c.cc.Invoke(ctx, "/grants.GiftsService/BrowseGifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiftsServiceServer is the server API for GiftsService service.
// All implementations must embed UnimplementedGiftsServiceServer
// for forward compatibility
type GiftsServiceServer interface {
	CreateGifts(context.Context, *CreateGiftsRequest) (*CreateGiftsReply, error)
	DeleteGifts(context.Context, *DeleteGiftsRequest) (*DeleteGiftsReply, error)
	ClaimGifts(context.Context, *ClaimGiftsRequest) (*ClaimGiftsReply, error)
	BrowseGifts(context.Context, *BrowseGiftsRequest) (*BrowseGiftsReply, error)
	mustEmbedUnimplementedGiftsServiceServer()
}

// UnimplementedGiftsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGiftsServiceServer struct {
}

func (UnimplementedGiftsServiceServer) CreateGifts(context.Context, *CreateGiftsRequest) (*CreateGiftsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGifts not implemented")
}
func (UnimplementedGiftsServiceServer) DeleteGifts(context.Context, *DeleteGiftsRequest) (*DeleteGiftsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGifts not implemented")
}
func (UnimplementedGiftsServiceServer) ClaimGifts(context.Context, *ClaimGiftsRequest) (*ClaimGiftsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimGifts not implemented")
}
func (UnimplementedGiftsServiceServer) BrowseGifts(context.Context, *BrowseGiftsRequest) (*BrowseGiftsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseGifts not implemented")
}
func (UnimplementedGiftsServiceServer) mustEmbedUnimplementedGiftsServiceServer() {}

// UnsafeGiftsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiftsServiceServer will
// result in compilation errors.
type UnsafeGiftsServiceServer interface {
	mustEmbedUnimplementedGiftsServiceServer()
}

func RegisterGiftsServiceServer(s grpc.ServiceRegistrar, srv GiftsServiceServer) {
	s.RegisterService(&GiftsService_ServiceDesc, srv)
}

func _GiftsService_CreateGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftsServiceServer).CreateGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GiftsService/CreateGifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftsServiceServer).CreateGifts(ctx, req.(*CreateGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftsService_DeleteGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftsServiceServer).DeleteGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GiftsService/DeleteGifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftsServiceServer).DeleteGifts(ctx, req.(*DeleteGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftsService_ClaimGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftsServiceServer).ClaimGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GiftsService/ClaimGifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftsServiceServer).ClaimGifts(ctx, req.(*ClaimGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftsService_BrowseGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseGiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftsServiceServer).BrowseGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grants.GiftsService/BrowseGifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftsServiceServer).BrowseGifts(ctx, req.(*BrowseGiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GiftsService_ServiceDesc is the grpc.ServiceDesc for GiftsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GiftsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grants.GiftsService",
	HandlerType: (*GiftsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGifts",
			Handler:    _GiftsService_CreateGifts_Handler,
		},
		{
			MethodName: "DeleteGifts",
			Handler:    _GiftsService_DeleteGifts_Handler,
		},
		{
			MethodName: "ClaimGifts",
			Handler:    _GiftsService_ClaimGifts_Handler,
		},
		{
			MethodName: "BrowseGifts",
			Handler:    _GiftsService_BrowseGifts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gifts.proto",
}
