// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RegisterProjectRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RegisterProjectRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegisterProjectRequest(bb:flatbuffers.ByteBuffer, obj?:RegisterProjectRequest):RegisterProjectRequest {
  return (obj || new RegisterProjectRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegisterProjectRequest(bb:flatbuffers.ByteBuffer, obj?:RegisterProjectRequest):RegisterProjectRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RegisterProjectRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

reference():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

projectId():string|null
projectId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
projectId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRegisterProjectRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addReference(builder:flatbuffers.Builder, reference:number) {
  builder.addFieldInt8(0, reference, 0);
}

static addProjectId(builder:flatbuffers.Builder, projectIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, projectIdOffset, 0);
}

static endRegisterProjectRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // project_id
  return offset;
}

static createRegisterProjectRequest(builder:flatbuffers.Builder, reference:number, projectIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  RegisterProjectRequest.startRegisterProjectRequest(builder);
  RegisterProjectRequest.addReference(builder, reference);
  RegisterProjectRequest.addProjectId(builder, projectIdOffset);
  return RegisterProjectRequest.endRegisterProjectRequest(builder);
}
}
