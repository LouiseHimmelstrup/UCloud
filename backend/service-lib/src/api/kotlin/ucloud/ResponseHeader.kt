// automatically generated by the FlatBuffers compiler, do not modify

package ucloud

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class ResponseHeader : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ResponseHeader {
        __init(_i, _bb)
        return this
    }
    val status : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    val stream : UShort
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val endOfStream : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsResponseHeader(_bb: ByteBuffer): ResponseHeader = getRootAsResponseHeader(_bb, ResponseHeader())
        fun getRootAsResponseHeader(_bb: ByteBuffer, obj: ResponseHeader): ResponseHeader {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createResponseHeader(builder: FlatBufferBuilder, status: UByte, stream: UShort, endOfStream: Boolean) : Int {
            builder.startTable(3)
            addStream(builder, stream)
            addEndOfStream(builder, endOfStream)
            addStatus(builder, status)
            return endResponseHeader(builder)
        }
        fun startResponseHeader(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addStatus(builder: FlatBufferBuilder, status: UByte) = builder.addByte(0, status.toByte(), 0)
        fun addStream(builder: FlatBufferBuilder, stream: UShort) = builder.addShort(1, stream.toShort(), 0)
        fun addEndOfStream(builder: FlatBufferBuilder, endOfStream: Boolean) = builder.addBoolean(2, endOfStream, false)
        fun endResponseHeader(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
