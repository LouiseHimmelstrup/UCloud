// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: avatar.proto

package avatar

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Top int32

const (
	Top_TOP_UNSPECIFIED                     Top = 0
	Top_TOP_NO_HAIR                         Top = 1
	Top_TOP_EYEPATCH                        Top = 2
	Top_TOP_HAT                             Top = 3
	Top_TOP_HIJAB                           Top = 4
	Top_TOP_TURBAN                          Top = 5
	Top_TOP_WINTER_HAT1                     Top = 6
	Top_TOP_WINTER_HAT2                     Top = 7
	Top_TOP_WINTER_HAT3                     Top = 8
	Top_TOP_WINTER_HAT4                     Top = 9
	Top_TOP_LONG_HAIR_BIG_HAIR              Top = 10
	Top_TOP_LONG_HAIR_BOB                   Top = 11
	Top_TOP_LONG_HAIR_BUN                   Top = 12
	Top_TOP_LONG_HAIR_CURLY                 Top = 13
	Top_TOP_LONG_HAIR_CURVY                 Top = 14
	Top_TOP_LONG_HAIR_DREADS                Top = 15
	Top_TOP_LONG_HAIR_FRIDA                 Top = 16
	Top_TOP_LONG_HAIR_FRO                   Top = 17
	Top_TOP_LONG_HAIR_FRO_BAND              Top = 18
	Top_TOP_LONG_HAIR_NOT_TOO_LONG          Top = 19
	Top_TOP_LONG_HAIR_SHAVED_SIDES          Top = 20
	Top_TOP_LONG_HAIR_MIA_WALLACE           Top = 21
	Top_TOP_LONG_HAIR_STRAIGHT              Top = 22
	Top_TOP_LONG_HAIR_STRAIGHT2             Top = 23
	Top_TOP_LONG_HAIR_STRAIGHT_STRAND       Top = 24
	Top_TOP_SHORT_HAIR_DREADS01             Top = 25
	Top_TOP_SHORT_HAIR_DREADS02             Top = 26
	Top_TOP_SHORT_HAIR_FRIZZLE              Top = 27
	Top_TOP_SHORT_HAIR_SHAGGY_MULLET        Top = 28
	Top_TOP_SHORT_HAIR_SHORT_CURLY          Top = 29
	Top_TOP_SHORT_HAIR_SHORT_FLAT           Top = 30
	Top_TOP_SHORT_HAIR_SHORT_ROUND          Top = 31
	Top_TOP_SHORT_HAIR_SHORT_WAVED          Top = 32
	Top_TOP_SHORT_HAIR_SIDES                Top = 33
	Top_TOP_SHORT_HAIR_THE_CAESAR           Top = 34
	Top_TOP_SHORT_HAIR_THE_CAESAR_SIDE_PART Top = 35
)

// Enum value maps for Top.
var (
	Top_name = map[int32]string{
		0:  "TOP_UNSPECIFIED",
		1:  "TOP_NO_HAIR",
		2:  "TOP_EYEPATCH",
		3:  "TOP_HAT",
		4:  "TOP_HIJAB",
		5:  "TOP_TURBAN",
		6:  "TOP_WINTER_HAT1",
		7:  "TOP_WINTER_HAT2",
		8:  "TOP_WINTER_HAT3",
		9:  "TOP_WINTER_HAT4",
		10: "TOP_LONG_HAIR_BIG_HAIR",
		11: "TOP_LONG_HAIR_BOB",
		12: "TOP_LONG_HAIR_BUN",
		13: "TOP_LONG_HAIR_CURLY",
		14: "TOP_LONG_HAIR_CURVY",
		15: "TOP_LONG_HAIR_DREADS",
		16: "TOP_LONG_HAIR_FRIDA",
		17: "TOP_LONG_HAIR_FRO",
		18: "TOP_LONG_HAIR_FRO_BAND",
		19: "TOP_LONG_HAIR_NOT_TOO_LONG",
		20: "TOP_LONG_HAIR_SHAVED_SIDES",
		21: "TOP_LONG_HAIR_MIA_WALLACE",
		22: "TOP_LONG_HAIR_STRAIGHT",
		23: "TOP_LONG_HAIR_STRAIGHT2",
		24: "TOP_LONG_HAIR_STRAIGHT_STRAND",
		25: "TOP_SHORT_HAIR_DREADS01",
		26: "TOP_SHORT_HAIR_DREADS02",
		27: "TOP_SHORT_HAIR_FRIZZLE",
		28: "TOP_SHORT_HAIR_SHAGGY_MULLET",
		29: "TOP_SHORT_HAIR_SHORT_CURLY",
		30: "TOP_SHORT_HAIR_SHORT_FLAT",
		31: "TOP_SHORT_HAIR_SHORT_ROUND",
		32: "TOP_SHORT_HAIR_SHORT_WAVED",
		33: "TOP_SHORT_HAIR_SIDES",
		34: "TOP_SHORT_HAIR_THE_CAESAR",
		35: "TOP_SHORT_HAIR_THE_CAESAR_SIDE_PART",
	}
	Top_value = map[string]int32{
		"TOP_UNSPECIFIED":                     0,
		"TOP_NO_HAIR":                         1,
		"TOP_EYEPATCH":                        2,
		"TOP_HAT":                             3,
		"TOP_HIJAB":                           4,
		"TOP_TURBAN":                          5,
		"TOP_WINTER_HAT1":                     6,
		"TOP_WINTER_HAT2":                     7,
		"TOP_WINTER_HAT3":                     8,
		"TOP_WINTER_HAT4":                     9,
		"TOP_LONG_HAIR_BIG_HAIR":              10,
		"TOP_LONG_HAIR_BOB":                   11,
		"TOP_LONG_HAIR_BUN":                   12,
		"TOP_LONG_HAIR_CURLY":                 13,
		"TOP_LONG_HAIR_CURVY":                 14,
		"TOP_LONG_HAIR_DREADS":                15,
		"TOP_LONG_HAIR_FRIDA":                 16,
		"TOP_LONG_HAIR_FRO":                   17,
		"TOP_LONG_HAIR_FRO_BAND":              18,
		"TOP_LONG_HAIR_NOT_TOO_LONG":          19,
		"TOP_LONG_HAIR_SHAVED_SIDES":          20,
		"TOP_LONG_HAIR_MIA_WALLACE":           21,
		"TOP_LONG_HAIR_STRAIGHT":              22,
		"TOP_LONG_HAIR_STRAIGHT2":             23,
		"TOP_LONG_HAIR_STRAIGHT_STRAND":       24,
		"TOP_SHORT_HAIR_DREADS01":             25,
		"TOP_SHORT_HAIR_DREADS02":             26,
		"TOP_SHORT_HAIR_FRIZZLE":              27,
		"TOP_SHORT_HAIR_SHAGGY_MULLET":        28,
		"TOP_SHORT_HAIR_SHORT_CURLY":          29,
		"TOP_SHORT_HAIR_SHORT_FLAT":           30,
		"TOP_SHORT_HAIR_SHORT_ROUND":          31,
		"TOP_SHORT_HAIR_SHORT_WAVED":          32,
		"TOP_SHORT_HAIR_SIDES":                33,
		"TOP_SHORT_HAIR_THE_CAESAR":           34,
		"TOP_SHORT_HAIR_THE_CAESAR_SIDE_PART": 35,
	}
)

func (x Top) Enum() *Top {
	p := new(Top)
	*p = x
	return p
}

func (x Top) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Top) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[0].Descriptor()
}

func (Top) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[0]
}

func (x Top) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Top.Descriptor instead.
func (Top) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{0}
}

type TopAccessory int32

const (
	TopAccessory_TOP_ACCESSORY_UNSPECIFIED    TopAccessory = 0
	TopAccessory_TOP_ACCESSORY_BLANK          TopAccessory = 1
	TopAccessory_TOP_ACCESSORY_KURT           TopAccessory = 2
	TopAccessory_TOP_ACCESSORY_PRESCRIPTION01 TopAccessory = 3
	TopAccessory_TOP_ACCESSORY_PRESCRIPTION02 TopAccessory = 4
	TopAccessory_TOP_ACCESSORY_ROUND          TopAccessory = 5
	TopAccessory_TOP_ACCESSORY_SUNGLASSES     TopAccessory = 6
	TopAccessory_TOP_ACCESSORY_WAYFARERS      TopAccessory = 7
)

// Enum value maps for TopAccessory.
var (
	TopAccessory_name = map[int32]string{
		0: "TOP_ACCESSORY_UNSPECIFIED",
		1: "TOP_ACCESSORY_BLANK",
		2: "TOP_ACCESSORY_KURT",
		3: "TOP_ACCESSORY_PRESCRIPTION01",
		4: "TOP_ACCESSORY_PRESCRIPTION02",
		5: "TOP_ACCESSORY_ROUND",
		6: "TOP_ACCESSORY_SUNGLASSES",
		7: "TOP_ACCESSORY_WAYFARERS",
	}
	TopAccessory_value = map[string]int32{
		"TOP_ACCESSORY_UNSPECIFIED":    0,
		"TOP_ACCESSORY_BLANK":          1,
		"TOP_ACCESSORY_KURT":           2,
		"TOP_ACCESSORY_PRESCRIPTION01": 3,
		"TOP_ACCESSORY_PRESCRIPTION02": 4,
		"TOP_ACCESSORY_ROUND":          5,
		"TOP_ACCESSORY_SUNGLASSES":     6,
		"TOP_ACCESSORY_WAYFARERS":      7,
	}
)

func (x TopAccessory) Enum() *TopAccessory {
	p := new(TopAccessory)
	*p = x
	return p
}

func (x TopAccessory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopAccessory) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[1].Descriptor()
}

func (TopAccessory) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[1]
}

func (x TopAccessory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopAccessory.Descriptor instead.
func (TopAccessory) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{1}
}

type HairColor int32

const (
	HairColor_HAIR_COLOR_UNSPECIFIED   HairColor = 0
	HairColor_HAIR_COLOR_AUBURN        HairColor = 1
	HairColor_HAIR_COLOR_BLACK         HairColor = 2
	HairColor_HAIR_COLOR_BLONDE        HairColor = 3
	HairColor_HAIR_COLOR_BLONDE_GOLDEN HairColor = 4
	HairColor_HAIR_COLOR_BROWN         HairColor = 5
	HairColor_HAIR_COLOR_BROWN_DARK    HairColor = 6
	HairColor_HAIR_COLOR_PASTEL_PINK   HairColor = 7
	HairColor_HAIR_COLOR_PLATINUM      HairColor = 8
	HairColor_HAIR_COLOR_RED           HairColor = 9
	HairColor_HAIR_COLOR_SILVER_GRAY   HairColor = 10
)

// Enum value maps for HairColor.
var (
	HairColor_name = map[int32]string{
		0:  "HAIR_COLOR_UNSPECIFIED",
		1:  "HAIR_COLOR_AUBURN",
		2:  "HAIR_COLOR_BLACK",
		3:  "HAIR_COLOR_BLONDE",
		4:  "HAIR_COLOR_BLONDE_GOLDEN",
		5:  "HAIR_COLOR_BROWN",
		6:  "HAIR_COLOR_BROWN_DARK",
		7:  "HAIR_COLOR_PASTEL_PINK",
		8:  "HAIR_COLOR_PLATINUM",
		9:  "HAIR_COLOR_RED",
		10: "HAIR_COLOR_SILVER_GRAY",
	}
	HairColor_value = map[string]int32{
		"HAIR_COLOR_UNSPECIFIED":   0,
		"HAIR_COLOR_AUBURN":        1,
		"HAIR_COLOR_BLACK":         2,
		"HAIR_COLOR_BLONDE":        3,
		"HAIR_COLOR_BLONDE_GOLDEN": 4,
		"HAIR_COLOR_BROWN":         5,
		"HAIR_COLOR_BROWN_DARK":    6,
		"HAIR_COLOR_PASTEL_PINK":   7,
		"HAIR_COLOR_PLATINUM":      8,
		"HAIR_COLOR_RED":           9,
		"HAIR_COLOR_SILVER_GRAY":   10,
	}
)

func (x HairColor) Enum() *HairColor {
	p := new(HairColor)
	*p = x
	return p
}

func (x HairColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HairColor) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[2].Descriptor()
}

func (HairColor) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[2]
}

func (x HairColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HairColor.Descriptor instead.
func (HairColor) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{2}
}

type HatColor int32

const (
	HatColor_HAT_COLOR_UNSPECIFIED  HatColor = 0
	HatColor_HAT_COLOR_BLACK        HatColor = 1
	HatColor_HAT_COLOR_BLUE01       HatColor = 2
	HatColor_HAT_COLOR_BLUE02       HatColor = 3
	HatColor_HAT_COLOR_BLUE03       HatColor = 4
	HatColor_HAT_COLOR_GRAY01       HatColor = 5
	HatColor_HAT_COLOR_GRAY02       HatColor = 6
	HatColor_HAT_COLOR_HEATHER      HatColor = 7
	HatColor_HAT_COLOR_PASTELBLUE   HatColor = 8
	HatColor_HAT_COLOR_PASTELGREEN  HatColor = 9
	HatColor_HAT_COLOR_PASTELORANGE HatColor = 10
	HatColor_HAT_COLOR_PASTELRED    HatColor = 11
	HatColor_HAT_COLOR_PASTELYELLOW HatColor = 12
	HatColor_HAT_COLOR_PINK         HatColor = 13
	HatColor_HAT_COLOR_RED          HatColor = 14
	HatColor_HAT_COLOR_WHITE        HatColor = 15
)

// Enum value maps for HatColor.
var (
	HatColor_name = map[int32]string{
		0:  "HAT_COLOR_UNSPECIFIED",
		1:  "HAT_COLOR_BLACK",
		2:  "HAT_COLOR_BLUE01",
		3:  "HAT_COLOR_BLUE02",
		4:  "HAT_COLOR_BLUE03",
		5:  "HAT_COLOR_GRAY01",
		6:  "HAT_COLOR_GRAY02",
		7:  "HAT_COLOR_HEATHER",
		8:  "HAT_COLOR_PASTELBLUE",
		9:  "HAT_COLOR_PASTELGREEN",
		10: "HAT_COLOR_PASTELORANGE",
		11: "HAT_COLOR_PASTELRED",
		12: "HAT_COLOR_PASTELYELLOW",
		13: "HAT_COLOR_PINK",
		14: "HAT_COLOR_RED",
		15: "HAT_COLOR_WHITE",
	}
	HatColor_value = map[string]int32{
		"HAT_COLOR_UNSPECIFIED":  0,
		"HAT_COLOR_BLACK":        1,
		"HAT_COLOR_BLUE01":       2,
		"HAT_COLOR_BLUE02":       3,
		"HAT_COLOR_BLUE03":       4,
		"HAT_COLOR_GRAY01":       5,
		"HAT_COLOR_GRAY02":       6,
		"HAT_COLOR_HEATHER":      7,
		"HAT_COLOR_PASTELBLUE":   8,
		"HAT_COLOR_PASTELGREEN":  9,
		"HAT_COLOR_PASTELORANGE": 10,
		"HAT_COLOR_PASTELRED":    11,
		"HAT_COLOR_PASTELYELLOW": 12,
		"HAT_COLOR_PINK":         13,
		"HAT_COLOR_RED":          14,
		"HAT_COLOR_WHITE":        15,
	}
)

func (x HatColor) Enum() *HatColor {
	p := new(HatColor)
	*p = x
	return p
}

func (x HatColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HatColor) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[3].Descriptor()
}

func (HatColor) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[3]
}

func (x HatColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HatColor.Descriptor instead.
func (HatColor) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{3}
}

type FacialHair int32

const (
	FacialHair_FACIAL_HAIR_UNSPECIFIED      FacialHair = 0
	FacialHair_FACIAL_HAIR_BLANK            FacialHair = 1
	FacialHair_FACIAL_HAIR_BEARD_MEDIUM     FacialHair = 2
	FacialHair_FACIAL_HAIR_BEARD_LIGHT      FacialHair = 3
	FacialHair_FACIAL_HAIR_BEARD_MAJESTIC   FacialHair = 4
	FacialHair_FACIAL_HAIR_MOUSTACHE_FANCY  FacialHair = 5
	FacialHair_FACIAL_HAIR_MOUSTACHE_MAGNUM FacialHair = 6
)

// Enum value maps for FacialHair.
var (
	FacialHair_name = map[int32]string{
		0: "FACIAL_HAIR_UNSPECIFIED",
		1: "FACIAL_HAIR_BLANK",
		2: "FACIAL_HAIR_BEARD_MEDIUM",
		3: "FACIAL_HAIR_BEARD_LIGHT",
		4: "FACIAL_HAIR_BEARD_MAJESTIC",
		5: "FACIAL_HAIR_MOUSTACHE_FANCY",
		6: "FACIAL_HAIR_MOUSTACHE_MAGNUM",
	}
	FacialHair_value = map[string]int32{
		"FACIAL_HAIR_UNSPECIFIED":      0,
		"FACIAL_HAIR_BLANK":            1,
		"FACIAL_HAIR_BEARD_MEDIUM":     2,
		"FACIAL_HAIR_BEARD_LIGHT":      3,
		"FACIAL_HAIR_BEARD_MAJESTIC":   4,
		"FACIAL_HAIR_MOUSTACHE_FANCY":  5,
		"FACIAL_HAIR_MOUSTACHE_MAGNUM": 6,
	}
)

func (x FacialHair) Enum() *FacialHair {
	p := new(FacialHair)
	*p = x
	return p
}

func (x FacialHair) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacialHair) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[4].Descriptor()
}

func (FacialHair) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[4]
}

func (x FacialHair) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacialHair.Descriptor instead.
func (FacialHair) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{4}
}

type FacialHairColor int32

const (
	FacialHairColor_FACIAL_HAIR_COLOR_UNSPECIFIED   FacialHairColor = 0
	FacialHairColor_FACIAL_HAIR_COLOR_AUBURN        FacialHairColor = 1
	FacialHairColor_FACIAL_HAIR_COLOR_BLACK         FacialHairColor = 2
	FacialHairColor_FACIAL_HAIR_COLOR_BLONDE        FacialHairColor = 3
	FacialHairColor_FACIAL_HAIR_COLOR_BLONDE_GOLDEN FacialHairColor = 4
	FacialHairColor_FACIAL_HAIR_COLOR_BROWN         FacialHairColor = 5
	FacialHairColor_FACIAL_HAIR_COLOR_BROWN_DARK    FacialHairColor = 6
	FacialHairColor_FACIAL_HAIR_COLOR_PLATINUM      FacialHairColor = 7
	FacialHairColor_FACIAL_HAIR_COLOR_RED           FacialHairColor = 8
)

// Enum value maps for FacialHairColor.
var (
	FacialHairColor_name = map[int32]string{
		0: "FACIAL_HAIR_COLOR_UNSPECIFIED",
		1: "FACIAL_HAIR_COLOR_AUBURN",
		2: "FACIAL_HAIR_COLOR_BLACK",
		3: "FACIAL_HAIR_COLOR_BLONDE",
		4: "FACIAL_HAIR_COLOR_BLONDE_GOLDEN",
		5: "FACIAL_HAIR_COLOR_BROWN",
		6: "FACIAL_HAIR_COLOR_BROWN_DARK",
		7: "FACIAL_HAIR_COLOR_PLATINUM",
		8: "FACIAL_HAIR_COLOR_RED",
	}
	FacialHairColor_value = map[string]int32{
		"FACIAL_HAIR_COLOR_UNSPECIFIED":   0,
		"FACIAL_HAIR_COLOR_AUBURN":        1,
		"FACIAL_HAIR_COLOR_BLACK":         2,
		"FACIAL_HAIR_COLOR_BLONDE":        3,
		"FACIAL_HAIR_COLOR_BLONDE_GOLDEN": 4,
		"FACIAL_HAIR_COLOR_BROWN":         5,
		"FACIAL_HAIR_COLOR_BROWN_DARK":    6,
		"FACIAL_HAIR_COLOR_PLATINUM":      7,
		"FACIAL_HAIR_COLOR_RED":           8,
	}
)

func (x FacialHairColor) Enum() *FacialHairColor {
	p := new(FacialHairColor)
	*p = x
	return p
}

func (x FacialHairColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacialHairColor) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[5].Descriptor()
}

func (FacialHairColor) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[5]
}

func (x FacialHairColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacialHairColor.Descriptor instead.
func (FacialHairColor) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{5}
}

type Clothes int32

const (
	Clothes_CLOTHES_BLAZER_UNSPECIFIED Clothes = 0
	Clothes_CLOTHES_BLAZER_SHIRT       Clothes = 1
	Clothes_CLOTHES_BLAZER_SWEATER     Clothes = 2
	Clothes_CLOTHES_COLLAR_SWEATER     Clothes = 3
	Clothes_CLOTHES_GRAPHIC_SHIRT      Clothes = 4
	Clothes_CLOTHES_HOODIE             Clothes = 5
	Clothes_CLOTHES_OVERALL            Clothes = 6
	Clothes_CLOTHES_SHIRT_CREW_NECK    Clothes = 7
	Clothes_CLOTHES_SHIRT_SCOOP_NECK   Clothes = 8
	Clothes_CLOTHES_SHIRT_V_NECK       Clothes = 9
)

// Enum value maps for Clothes.
var (
	Clothes_name = map[int32]string{
		0: "CLOTHES_BLAZER_UNSPECIFIED",
		1: "CLOTHES_BLAZER_SHIRT",
		2: "CLOTHES_BLAZER_SWEATER",
		3: "CLOTHES_COLLAR_SWEATER",
		4: "CLOTHES_GRAPHIC_SHIRT",
		5: "CLOTHES_HOODIE",
		6: "CLOTHES_OVERALL",
		7: "CLOTHES_SHIRT_CREW_NECK",
		8: "CLOTHES_SHIRT_SCOOP_NECK",
		9: "CLOTHES_SHIRT_V_NECK",
	}
	Clothes_value = map[string]int32{
		"CLOTHES_BLAZER_UNSPECIFIED": 0,
		"CLOTHES_BLAZER_SHIRT":       1,
		"CLOTHES_BLAZER_SWEATER":     2,
		"CLOTHES_COLLAR_SWEATER":     3,
		"CLOTHES_GRAPHIC_SHIRT":      4,
		"CLOTHES_HOODIE":             5,
		"CLOTHES_OVERALL":            6,
		"CLOTHES_SHIRT_CREW_NECK":    7,
		"CLOTHES_SHIRT_SCOOP_NECK":   8,
		"CLOTHES_SHIRT_V_NECK":       9,
	}
)

func (x Clothes) Enum() *Clothes {
	p := new(Clothes)
	*p = x
	return p
}

func (x Clothes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Clothes) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[6].Descriptor()
}

func (Clothes) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[6]
}

func (x Clothes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Clothes.Descriptor instead.
func (Clothes) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{6}
}

type ColorFabric int32

const (
	ColorFabric_COLOR_FABRIC_UNSPECIFIED   ColorFabric = 0
	ColorFabric_COLOR_FABRIC_BLACK         ColorFabric = 1
	ColorFabric_COLOR_FABRIC_BLUE01        ColorFabric = 2
	ColorFabric_COLOR_FABRIC_BLUE02        ColorFabric = 3
	ColorFabric_COLOR_FABRIC_BLUE03        ColorFabric = 4
	ColorFabric_COLOR_FABRIC_GRAY01        ColorFabric = 5
	ColorFabric_COLOR_FABRIC_GRAY02        ColorFabric = 6
	ColorFabric_COLOR_FABRIC_HEATHER       ColorFabric = 7
	ColorFabric_COLOR_FABRIC_PASTEL_BLUE   ColorFabric = 8
	ColorFabric_COLOR_FABRIC_PASTEL_GREEN  ColorFabric = 9
	ColorFabric_COLOR_FABRIC_PASTEL_ORANGE ColorFabric = 10
	ColorFabric_COLOR_FABRIC_PASTEL_RED    ColorFabric = 11
	ColorFabric_COLOR_FABRIC_PASTEL_YELLOW ColorFabric = 12
	ColorFabric_COLOR_FABRIC_PINK          ColorFabric = 13
	ColorFabric_COLOR_FABRIC_RED           ColorFabric = 14
	ColorFabric_COLOR_FABRIC_WHITE         ColorFabric = 15
)

// Enum value maps for ColorFabric.
var (
	ColorFabric_name = map[int32]string{
		0:  "COLOR_FABRIC_UNSPECIFIED",
		1:  "COLOR_FABRIC_BLACK",
		2:  "COLOR_FABRIC_BLUE01",
		3:  "COLOR_FABRIC_BLUE02",
		4:  "COLOR_FABRIC_BLUE03",
		5:  "COLOR_FABRIC_GRAY01",
		6:  "COLOR_FABRIC_GRAY02",
		7:  "COLOR_FABRIC_HEATHER",
		8:  "COLOR_FABRIC_PASTEL_BLUE",
		9:  "COLOR_FABRIC_PASTEL_GREEN",
		10: "COLOR_FABRIC_PASTEL_ORANGE",
		11: "COLOR_FABRIC_PASTEL_RED",
		12: "COLOR_FABRIC_PASTEL_YELLOW",
		13: "COLOR_FABRIC_PINK",
		14: "COLOR_FABRIC_RED",
		15: "COLOR_FABRIC_WHITE",
	}
	ColorFabric_value = map[string]int32{
		"COLOR_FABRIC_UNSPECIFIED":   0,
		"COLOR_FABRIC_BLACK":         1,
		"COLOR_FABRIC_BLUE01":        2,
		"COLOR_FABRIC_BLUE02":        3,
		"COLOR_FABRIC_BLUE03":        4,
		"COLOR_FABRIC_GRAY01":        5,
		"COLOR_FABRIC_GRAY02":        6,
		"COLOR_FABRIC_HEATHER":       7,
		"COLOR_FABRIC_PASTEL_BLUE":   8,
		"COLOR_FABRIC_PASTEL_GREEN":  9,
		"COLOR_FABRIC_PASTEL_ORANGE": 10,
		"COLOR_FABRIC_PASTEL_RED":    11,
		"COLOR_FABRIC_PASTEL_YELLOW": 12,
		"COLOR_FABRIC_PINK":          13,
		"COLOR_FABRIC_RED":           14,
		"COLOR_FABRIC_WHITE":         15,
	}
)

func (x ColorFabric) Enum() *ColorFabric {
	p := new(ColorFabric)
	*p = x
	return p
}

func (x ColorFabric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorFabric) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[7].Descriptor()
}

func (ColorFabric) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[7]
}

func (x ColorFabric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorFabric.Descriptor instead.
func (ColorFabric) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{7}
}

type Eyes int32

const (
	Eyes_EYES_UNSPECIFIED Eyes = 0
	Eyes_EYES_CLOSE       Eyes = 1
	Eyes_EYES_CRY         Eyes = 2
	Eyes_EYES_DEFAULT     Eyes = 3
	Eyes_EYES_DIZZY       Eyes = 4
	Eyes_EYES_EYE_ROLL    Eyes = 5
	Eyes_EYES_HAPPY       Eyes = 6
	Eyes_EYES_HEARTS      Eyes = 7
	Eyes_EYES_SIDE        Eyes = 8
	Eyes_EYES_SQUINT      Eyes = 9
	Eyes_EYES_SURPRISED   Eyes = 10
	Eyes_EYES_WINK        Eyes = 11
	Eyes_EYES_WINK_WACKY  Eyes = 12
)

// Enum value maps for Eyes.
var (
	Eyes_name = map[int32]string{
		0:  "EYES_UNSPECIFIED",
		1:  "EYES_CLOSE",
		2:  "EYES_CRY",
		3:  "EYES_DEFAULT",
		4:  "EYES_DIZZY",
		5:  "EYES_EYE_ROLL",
		6:  "EYES_HAPPY",
		7:  "EYES_HEARTS",
		8:  "EYES_SIDE",
		9:  "EYES_SQUINT",
		10: "EYES_SURPRISED",
		11: "EYES_WINK",
		12: "EYES_WINK_WACKY",
	}
	Eyes_value = map[string]int32{
		"EYES_UNSPECIFIED": 0,
		"EYES_CLOSE":       1,
		"EYES_CRY":         2,
		"EYES_DEFAULT":     3,
		"EYES_DIZZY":       4,
		"EYES_EYE_ROLL":    5,
		"EYES_HAPPY":       6,
		"EYES_HEARTS":      7,
		"EYES_SIDE":        8,
		"EYES_SQUINT":      9,
		"EYES_SURPRISED":   10,
		"EYES_WINK":        11,
		"EYES_WINK_WACKY":  12,
	}
)

func (x Eyes) Enum() *Eyes {
	p := new(Eyes)
	*p = x
	return p
}

func (x Eyes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Eyes) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[8].Descriptor()
}

func (Eyes) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[8]
}

func (x Eyes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Eyes.Descriptor instead.
func (Eyes) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{8}
}

type Eyebrows int32

const (
	Eyebrows_EYEBROWS_UNSPECIFIED            Eyebrows = 0
	Eyebrows_EYEBROWS_ANGRY                  Eyebrows = 1
	Eyebrows_EYEBROWS_ANGRY_NATURAL          Eyebrows = 2
	Eyebrows_EYEBROWS_DEFAULT                Eyebrows = 3
	Eyebrows_EYEBROWS_DEFAULT_NATURAL        Eyebrows = 4
	Eyebrows_EYEBROWS_FLAT_NATURAL           Eyebrows = 5
	Eyebrows_EYEBROWS_FROWN_NATURAL          Eyebrows = 6
	Eyebrows_EYEBROWS_RAISED_EXCITED         Eyebrows = 7
	Eyebrows_EYEBROWS_RAISED_EXCITED_NATURAL Eyebrows = 8
	Eyebrows_EYEBROWS_SAD_CONCERNED          Eyebrows = 9
	Eyebrows_EYEBROWS_SAD_CONCERNED_NATURAL  Eyebrows = 10
	Eyebrows_EYEBROWS_UNIBROW_NATURAL        Eyebrows = 11
	Eyebrows_EYEBROWS_UP_DOWN                Eyebrows = 12
	Eyebrows_EYEBROWS_UP_DOWN_NATURAL        Eyebrows = 13
)

// Enum value maps for Eyebrows.
var (
	Eyebrows_name = map[int32]string{
		0:  "EYEBROWS_UNSPECIFIED",
		1:  "EYEBROWS_ANGRY",
		2:  "EYEBROWS_ANGRY_NATURAL",
		3:  "EYEBROWS_DEFAULT",
		4:  "EYEBROWS_DEFAULT_NATURAL",
		5:  "EYEBROWS_FLAT_NATURAL",
		6:  "EYEBROWS_FROWN_NATURAL",
		7:  "EYEBROWS_RAISED_EXCITED",
		8:  "EYEBROWS_RAISED_EXCITED_NATURAL",
		9:  "EYEBROWS_SAD_CONCERNED",
		10: "EYEBROWS_SAD_CONCERNED_NATURAL",
		11: "EYEBROWS_UNIBROW_NATURAL",
		12: "EYEBROWS_UP_DOWN",
		13: "EYEBROWS_UP_DOWN_NATURAL",
	}
	Eyebrows_value = map[string]int32{
		"EYEBROWS_UNSPECIFIED":            0,
		"EYEBROWS_ANGRY":                  1,
		"EYEBROWS_ANGRY_NATURAL":          2,
		"EYEBROWS_DEFAULT":                3,
		"EYEBROWS_DEFAULT_NATURAL":        4,
		"EYEBROWS_FLAT_NATURAL":           5,
		"EYEBROWS_FROWN_NATURAL":          6,
		"EYEBROWS_RAISED_EXCITED":         7,
		"EYEBROWS_RAISED_EXCITED_NATURAL": 8,
		"EYEBROWS_SAD_CONCERNED":          9,
		"EYEBROWS_SAD_CONCERNED_NATURAL":  10,
		"EYEBROWS_UNIBROW_NATURAL":        11,
		"EYEBROWS_UP_DOWN":                12,
		"EYEBROWS_UP_DOWN_NATURAL":        13,
	}
)

func (x Eyebrows) Enum() *Eyebrows {
	p := new(Eyebrows)
	*p = x
	return p
}

func (x Eyebrows) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Eyebrows) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[9].Descriptor()
}

func (Eyebrows) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[9]
}

func (x Eyebrows) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Eyebrows.Descriptor instead.
func (Eyebrows) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{9}
}

type MouthTypes int32

const (
	MouthTypes_MOUTH_TYPES_UNSPECIFIED MouthTypes = 0
	MouthTypes_MOUTH_TYPES_CONCERNED   MouthTypes = 1
	MouthTypes_MOUTH_TYPES_DEFAULT     MouthTypes = 2
	MouthTypes_MOUTH_TYPES_DISBELIEF   MouthTypes = 3
	MouthTypes_MOUTH_TYPES_EATING      MouthTypes = 4
	MouthTypes_MOUTH_TYPES_GRIMACE     MouthTypes = 5
	MouthTypes_MOUTH_TYPES_SAD         MouthTypes = 6
	MouthTypes_MOUTH_TYPES_SCREAM_OPEN MouthTypes = 7
	MouthTypes_MOUTH_TYPES_SERIOUS     MouthTypes = 8
	MouthTypes_MOUTH_TYPES_SMILE       MouthTypes = 9
	MouthTypes_MOUTH_TYPES_TONGUE      MouthTypes = 10
	MouthTypes_MOUTH_TYPES_TWINKLE     MouthTypes = 11
	MouthTypes_MOUTH_TYPES_VOMIT       MouthTypes = 12
)

// Enum value maps for MouthTypes.
var (
	MouthTypes_name = map[int32]string{
		0:  "MOUTH_TYPES_UNSPECIFIED",
		1:  "MOUTH_TYPES_CONCERNED",
		2:  "MOUTH_TYPES_DEFAULT",
		3:  "MOUTH_TYPES_DISBELIEF",
		4:  "MOUTH_TYPES_EATING",
		5:  "MOUTH_TYPES_GRIMACE",
		6:  "MOUTH_TYPES_SAD",
		7:  "MOUTH_TYPES_SCREAM_OPEN",
		8:  "MOUTH_TYPES_SERIOUS",
		9:  "MOUTH_TYPES_SMILE",
		10: "MOUTH_TYPES_TONGUE",
		11: "MOUTH_TYPES_TWINKLE",
		12: "MOUTH_TYPES_VOMIT",
	}
	MouthTypes_value = map[string]int32{
		"MOUTH_TYPES_UNSPECIFIED": 0,
		"MOUTH_TYPES_CONCERNED":   1,
		"MOUTH_TYPES_DEFAULT":     2,
		"MOUTH_TYPES_DISBELIEF":   3,
		"MOUTH_TYPES_EATING":      4,
		"MOUTH_TYPES_GRIMACE":     5,
		"MOUTH_TYPES_SAD":         6,
		"MOUTH_TYPES_SCREAM_OPEN": 7,
		"MOUTH_TYPES_SERIOUS":     8,
		"MOUTH_TYPES_SMILE":       9,
		"MOUTH_TYPES_TONGUE":      10,
		"MOUTH_TYPES_TWINKLE":     11,
		"MOUTH_TYPES_VOMIT":       12,
	}
)

func (x MouthTypes) Enum() *MouthTypes {
	p := new(MouthTypes)
	*p = x
	return p
}

func (x MouthTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MouthTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[10].Descriptor()
}

func (MouthTypes) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[10]
}

func (x MouthTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MouthTypes.Descriptor instead.
func (MouthTypes) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{10}
}

type SkinColors int32

const (
	SkinColors_SKIN_COLORS_UNSPECIFIED SkinColors = 0
	SkinColors_SKIN_COLORS_TANNED      SkinColors = 1
	SkinColors_SKIN_COLORS_YELLOW      SkinColors = 2
	SkinColors_SKIN_COLORS_PALE        SkinColors = 3
	SkinColors_SKIN_COLORS_LIGHT       SkinColors = 4
	SkinColors_SKIN_COLORS_BROWN       SkinColors = 5
	SkinColors_SKIN_COLORS_DARK_BROWN  SkinColors = 6
	SkinColors_SKIN_COLORS_BLACK       SkinColors = 7
)

// Enum value maps for SkinColors.
var (
	SkinColors_name = map[int32]string{
		0: "SKIN_COLORS_UNSPECIFIED",
		1: "SKIN_COLORS_TANNED",
		2: "SKIN_COLORS_YELLOW",
		3: "SKIN_COLORS_PALE",
		4: "SKIN_COLORS_LIGHT",
		5: "SKIN_COLORS_BROWN",
		6: "SKIN_COLORS_DARK_BROWN",
		7: "SKIN_COLORS_BLACK",
	}
	SkinColors_value = map[string]int32{
		"SKIN_COLORS_UNSPECIFIED": 0,
		"SKIN_COLORS_TANNED":      1,
		"SKIN_COLORS_YELLOW":      2,
		"SKIN_COLORS_PALE":        3,
		"SKIN_COLORS_LIGHT":       4,
		"SKIN_COLORS_BROWN":       5,
		"SKIN_COLORS_DARK_BROWN":  6,
		"SKIN_COLORS_BLACK":       7,
	}
)

func (x SkinColors) Enum() *SkinColors {
	p := new(SkinColors)
	*p = x
	return p
}

func (x SkinColors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkinColors) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[11].Descriptor()
}

func (SkinColors) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[11]
}

func (x SkinColors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkinColors.Descriptor instead.
func (SkinColors) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{11}
}

type ClothesGraphic int32

const (
	ClothesGraphic_CLOTHES_GRAPHIC_UNSPECIFIED   ClothesGraphic = 0
	ClothesGraphic_CLOTHES_GRAPHIC_BAT           ClothesGraphic = 1
	ClothesGraphic_CLOTHES_GRAPHIC_CUMBIA        ClothesGraphic = 2
	ClothesGraphic_CLOTHES_GRAPHIC_DEER          ClothesGraphic = 3
	ClothesGraphic_CLOTHES_GRAPHIC_DIAMOND       ClothesGraphic = 4
	ClothesGraphic_CLOTHES_GRAPHIC_HOLA          ClothesGraphic = 5
	ClothesGraphic_CLOTHES_GRAPHIC_PIZZA         ClothesGraphic = 6
	ClothesGraphic_CLOTHES_GRAPHIC_RESIST        ClothesGraphic = 7
	ClothesGraphic_CLOTHES_GRAPHIC_SELENA        ClothesGraphic = 8
	ClothesGraphic_CLOTHES_GRAPHIC_BEAR          ClothesGraphic = 9
	ClothesGraphic_CLOTHES_GRAPHIC_SKULL_OUTLINE ClothesGraphic = 10
	ClothesGraphic_CLOTHES_GRAPHIC_SKULL         ClothesGraphic = 11
	ClothesGraphic_CLOTHES_GRAPHIC_ESPIE         ClothesGraphic = 12
	ClothesGraphic_CLOTHES_GRAPHIC_ESCIENCELOGO  ClothesGraphic = 13
	ClothesGraphic_CLOTHES_GRAPHIC_TEETH         ClothesGraphic = 14
)

// Enum value maps for ClothesGraphic.
var (
	ClothesGraphic_name = map[int32]string{
		0:  "CLOTHES_GRAPHIC_UNSPECIFIED",
		1:  "CLOTHES_GRAPHIC_BAT",
		2:  "CLOTHES_GRAPHIC_CUMBIA",
		3:  "CLOTHES_GRAPHIC_DEER",
		4:  "CLOTHES_GRAPHIC_DIAMOND",
		5:  "CLOTHES_GRAPHIC_HOLA",
		6:  "CLOTHES_GRAPHIC_PIZZA",
		7:  "CLOTHES_GRAPHIC_RESIST",
		8:  "CLOTHES_GRAPHIC_SELENA",
		9:  "CLOTHES_GRAPHIC_BEAR",
		10: "CLOTHES_GRAPHIC_SKULL_OUTLINE",
		11: "CLOTHES_GRAPHIC_SKULL",
		12: "CLOTHES_GRAPHIC_ESPIE",
		13: "CLOTHES_GRAPHIC_ESCIENCELOGO",
		14: "CLOTHES_GRAPHIC_TEETH",
	}
	ClothesGraphic_value = map[string]int32{
		"CLOTHES_GRAPHIC_UNSPECIFIED":   0,
		"CLOTHES_GRAPHIC_BAT":           1,
		"CLOTHES_GRAPHIC_CUMBIA":        2,
		"CLOTHES_GRAPHIC_DEER":          3,
		"CLOTHES_GRAPHIC_DIAMOND":       4,
		"CLOTHES_GRAPHIC_HOLA":          5,
		"CLOTHES_GRAPHIC_PIZZA":         6,
		"CLOTHES_GRAPHIC_RESIST":        7,
		"CLOTHES_GRAPHIC_SELENA":        8,
		"CLOTHES_GRAPHIC_BEAR":          9,
		"CLOTHES_GRAPHIC_SKULL_OUTLINE": 10,
		"CLOTHES_GRAPHIC_SKULL":         11,
		"CLOTHES_GRAPHIC_ESPIE":         12,
		"CLOTHES_GRAPHIC_ESCIENCELOGO":  13,
		"CLOTHES_GRAPHIC_TEETH":         14,
	}
)

func (x ClothesGraphic) Enum() *ClothesGraphic {
	p := new(ClothesGraphic)
	*p = x
	return p
}

func (x ClothesGraphic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClothesGraphic) Descriptor() protoreflect.EnumDescriptor {
	return file_avatar_proto_enumTypes[12].Descriptor()
}

func (ClothesGraphic) Type() protoreflect.EnumType {
	return &file_avatar_proto_enumTypes[12]
}

func (x ClothesGraphic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClothesGraphic.Descriptor instead.
func (ClothesGraphic) EnumDescriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{12}
}

type Avatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top             Top             `protobuf:"varint,1,opt,name=top,proto3,enum=avatar.Top" json:"top,omitempty"`
	TopAccessory    TopAccessory    `protobuf:"varint,2,opt,name=topAccessory,proto3,enum=avatar.TopAccessory" json:"topAccessory,omitempty"`
	HairColor       HairColor       `protobuf:"varint,3,opt,name=hairColor,proto3,enum=avatar.HairColor" json:"hairColor,omitempty"`
	FacialHair      FacialHair      `protobuf:"varint,4,opt,name=facialHair,proto3,enum=avatar.FacialHair" json:"facialHair,omitempty"`
	FacialHairColor FacialHairColor `protobuf:"varint,5,opt,name=facialHairColor,proto3,enum=avatar.FacialHairColor" json:"facialHairColor,omitempty"`
	Clothes         Clothes         `protobuf:"varint,6,opt,name=clothes,proto3,enum=avatar.Clothes" json:"clothes,omitempty"`
	ColorFabric     ColorFabric     `protobuf:"varint,7,opt,name=colorFabric,proto3,enum=avatar.ColorFabric" json:"colorFabric,omitempty"`
	Eyes            Eyes            `protobuf:"varint,8,opt,name=eyes,proto3,enum=avatar.Eyes" json:"eyes,omitempty"`
	Eyebrows        Eyebrows        `protobuf:"varint,9,opt,name=eyebrows,proto3,enum=avatar.Eyebrows" json:"eyebrows,omitempty"`
	MouthTypes      MouthTypes      `protobuf:"varint,10,opt,name=mouthTypes,proto3,enum=avatar.MouthTypes" json:"mouthTypes,omitempty"`
	SkinColors      SkinColors      `protobuf:"varint,11,opt,name=skinColors,proto3,enum=avatar.SkinColors" json:"skinColors,omitempty"`
	ClothesGraphic  ClothesGraphic  `protobuf:"varint,12,opt,name=clothesGraphic,proto3,enum=avatar.ClothesGraphic" json:"clothesGraphic,omitempty"`
	HatColor        HatColor        `protobuf:"varint,13,opt,name=hatColor,proto3,enum=avatar.HatColor" json:"hatColor,omitempty"`
}

func (x *Avatar) Reset() {
	*x = Avatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Avatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Avatar) ProtoMessage() {}

func (x *Avatar) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Avatar.ProtoReflect.Descriptor instead.
func (*Avatar) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{0}
}

func (x *Avatar) GetTop() Top {
	if x != nil {
		return x.Top
	}
	return Top_TOP_UNSPECIFIED
}

func (x *Avatar) GetTopAccessory() TopAccessory {
	if x != nil {
		return x.TopAccessory
	}
	return TopAccessory_TOP_ACCESSORY_UNSPECIFIED
}

func (x *Avatar) GetHairColor() HairColor {
	if x != nil {
		return x.HairColor
	}
	return HairColor_HAIR_COLOR_UNSPECIFIED
}

func (x *Avatar) GetFacialHair() FacialHair {
	if x != nil {
		return x.FacialHair
	}
	return FacialHair_FACIAL_HAIR_UNSPECIFIED
}

func (x *Avatar) GetFacialHairColor() FacialHairColor {
	if x != nil {
		return x.FacialHairColor
	}
	return FacialHairColor_FACIAL_HAIR_COLOR_UNSPECIFIED
}

func (x *Avatar) GetClothes() Clothes {
	if x != nil {
		return x.Clothes
	}
	return Clothes_CLOTHES_BLAZER_UNSPECIFIED
}

func (x *Avatar) GetColorFabric() ColorFabric {
	if x != nil {
		return x.ColorFabric
	}
	return ColorFabric_COLOR_FABRIC_UNSPECIFIED
}

func (x *Avatar) GetEyes() Eyes {
	if x != nil {
		return x.Eyes
	}
	return Eyes_EYES_UNSPECIFIED
}

func (x *Avatar) GetEyebrows() Eyebrows {
	if x != nil {
		return x.Eyebrows
	}
	return Eyebrows_EYEBROWS_UNSPECIFIED
}

func (x *Avatar) GetMouthTypes() MouthTypes {
	if x != nil {
		return x.MouthTypes
	}
	return MouthTypes_MOUTH_TYPES_UNSPECIFIED
}

func (x *Avatar) GetSkinColors() SkinColors {
	if x != nil {
		return x.SkinColors
	}
	return SkinColors_SKIN_COLORS_UNSPECIFIED
}

func (x *Avatar) GetClothesGraphic() ClothesGraphic {
	if x != nil {
		return x.ClothesGraphic
	}
	return ClothesGraphic_CLOTHES_GRAPHIC_UNSPECIFIED
}

func (x *Avatar) GetHatColor() HatColor {
	if x != nil {
		return x.HatColor
	}
	return HatColor_HAT_COLOR_UNSPECIFIED
}

type FindAvatarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usernames []string `protobuf:"bytes,1,rep,name=usernames,proto3" json:"usernames,omitempty"`
}

func (x *FindAvatarsRequest) Reset() {
	*x = FindAvatarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAvatarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAvatarsRequest) ProtoMessage() {}

func (x *FindAvatarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAvatarsRequest.ProtoReflect.Descriptor instead.
func (*FindAvatarsRequest) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{1}
}

func (x *FindAvatarsRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

type FindAvatarsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatars map[string]*Avatar `protobuf:"bytes,1,rep,name=avatars,proto3" json:"avatars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FindAvatarsReply) Reset() {
	*x = FindAvatarsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAvatarsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAvatarsReply) ProtoMessage() {}

func (x *FindAvatarsReply) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAvatarsReply.ProtoReflect.Descriptor instead.
func (*FindAvatarsReply) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{2}
}

func (x *FindAvatarsReply) GetAvatars() map[string]*Avatar {
	if x != nil {
		return x.Avatars
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_avatar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_avatar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_avatar_proto_rawDescGZIP(), []int{3}
}

var File_avatar_proto protoreflect.FileDescriptor

var file_avatar_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x91, 0x05, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x52, 0x03, 0x74, 0x6f, 0x70,
	0x12, 0x38, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e,
	0x54, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x6f,
	0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x68, 0x61,
	0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x66,
	0x61, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48,
	0x61, 0x69, 0x72, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72, 0x12,
	0x41, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x43, 0x6c, 0x6f,
	0x74, 0x68, 0x65, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x79, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x45, 0x79, 0x65, 0x73,
	0x52, 0x04, 0x65, 0x79, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x79, 0x65, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x2e, 0x45, 0x79, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x52, 0x08, 0x65, 0x79, 0x65, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x2e, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x6d, 0x6f,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0e,
	0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x43, 0x6c,
	0x6f, 0x74, 0x68, 0x65, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x74, 0x68, 0x65, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x08,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x48, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x08, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x32, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x73, 0x1a, 0x4a, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0xb3, 0x07, 0x0a, 0x03, 0x54, 0x6f,
	0x70, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x50, 0x5f, 0x4e, 0x4f,
	0x5f, 0x48, 0x41, 0x49, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x50, 0x5f, 0x45,
	0x59, 0x45, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4f, 0x50,
	0x5f, 0x48, 0x41, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x50, 0x5f, 0x48, 0x49,
	0x4a, 0x41, 0x42, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x55, 0x52,
	0x42, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x5f, 0x57, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x54, 0x31, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f,
	0x50, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x54, 0x32, 0x10, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x41,
	0x54, 0x33, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x48, 0x41, 0x54, 0x34, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x48,
	0x41, 0x49, 0x52, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x42, 0x4f, 0x42, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x42, 0x55,
	0x4e, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f,
	0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x59, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x44, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x0f, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x5f, 0x46, 0x52, 0x49, 0x44, 0x41, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x50, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x10, 0x11, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x5f, 0x46, 0x52, 0x4f, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x53, 0x48, 0x41,
	0x56, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x53, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x4d, 0x49, 0x41,
	0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f,
	0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54,
	0x32, 0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f,
	0x48, 0x41, 0x49, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x4e, 0x44, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x44, 0x52, 0x45, 0x41, 0x44, 0x53, 0x30,
	0x31, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x44, 0x52, 0x45, 0x41, 0x44, 0x53, 0x30, 0x32, 0x10, 0x1a,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41,
	0x49, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x5a, 0x5a, 0x4c, 0x45, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x53,
	0x48, 0x41, 0x47, 0x47, 0x59, 0x5f, 0x4d, 0x55, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x1c, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x1d, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x1e, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1f, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x56, 0x45, 0x44, 0x10, 0x20, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x53, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x50, 0x5f, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x43, 0x41,
	0x45, 0x53, 0x41, 0x52, 0x10, 0x22, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x43, 0x41, 0x45,
	0x53, 0x41, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x10, 0x23, 0x2a,
	0xf6, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59,
	0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x50, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x4b, 0x55, 0x52, 0x54, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x30, 0x31,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x30, 0x32, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x55, 0x4e, 0x47, 0x4c, 0x41, 0x53, 0x53, 0x45, 0x53, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x59,
	0x46, 0x41, 0x52, 0x45, 0x52, 0x53, 0x10, 0x07, 0x2a, 0x9f, 0x02, 0x0a, 0x09, 0x48, 0x61, 0x69,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x41, 0x55, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x49,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c,
	0x4f, 0x4e, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x4e, 0x44, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x45, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x44,
	0x41, 0x52, 0x4b, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x45, 0x4c, 0x5f, 0x50, 0x49, 0x4e, 0x4b, 0x10,
	0x07, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1a,
	0x0a, 0x16, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x4c,
	0x56, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x10, 0x0a, 0x2a, 0x81, 0x03, 0x0a, 0x08, 0x48,
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x54, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x54, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x30, 0x31, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x30,
	0x32, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x42, 0x4c, 0x55, 0x45, 0x30, 0x33, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x54,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x30, 0x31, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x41,
	0x59, 0x30, 0x32, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14,
	0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x45, 0x4c,
	0x42, 0x4c, 0x55, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x45, 0x4c, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10,
	0x09, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x50,
	0x41, 0x53, 0x54, 0x45, 0x4c, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x17, 0x0a,
	0x13, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x45,
	0x4c, 0x52, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x45, 0x4c, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57,
	0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x50, 0x49, 0x4e, 0x4b, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x54,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x0f, 0x2a, 0xde,
	0x01, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41,
	0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x5f, 0x42, 0x45, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x42,
	0x45, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x42, 0x45, 0x41, 0x52,
	0x44, 0x5f, 0x4d, 0x41, 0x4a, 0x45, 0x53, 0x54, 0x49, 0x43, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x4d, 0x4f, 0x55, 0x53,
	0x54, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x43, 0x59, 0x10, 0x05, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x4d, 0x4f, 0x55,
	0x53, 0x54, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x4e, 0x55, 0x4d, 0x10, 0x06, 0x2a,
	0xac, 0x02, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x41, 0x55, 0x42, 0x55,
	0x52, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48,
	0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x4e, 0x44, 0x45, 0x10, 0x03, 0x12,
	0x23, 0x0a, 0x1f, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x4e, 0x44, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x45, 0x4e, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48,
	0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x10,
	0x05, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x41, 0x52,
	0x4b, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x55,
	0x4d, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x48, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x94,
	0x02, 0x0a, 0x07, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c,
	0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x42, 0x4c, 0x41, 0x5a, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c,
	0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x42, 0x4c, 0x41, 0x5a, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x49,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f,
	0x42, 0x4c, 0x41, 0x5a, 0x45, 0x52, 0x5f, 0x53, 0x57, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x41, 0x52, 0x5f, 0x53, 0x57, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f,
	0x53, 0x48, 0x49, 0x52, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x4f, 0x54, 0x48,
	0x45, 0x53, 0x5f, 0x48, 0x4f, 0x4f, 0x44, 0x49, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x49, 0x52,
	0x54, 0x5f, 0x43, 0x52, 0x45, 0x57, 0x5f, 0x4e, 0x45, 0x43, 0x4b, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x49, 0x52, 0x54, 0x5f, 0x53,
	0x43, 0x4f, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x49, 0x52, 0x54, 0x5f, 0x56, 0x5f, 0x4e,
	0x45, 0x43, 0x4b, 0x10, 0x09, 0x2a, 0xb9, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42,
	0x52, 0x49, 0x43, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x4c, 0x55, 0x45,
	0x30, 0x31, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x42, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x30, 0x32, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x4c,
	0x55, 0x45, 0x30, 0x33, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x30, 0x31, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f,
	0x47, 0x52, 0x41, 0x59, 0x30, 0x32, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52,
	0x49, 0x43, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x45, 0x4c, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x08,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43,
	0x5f, 0x50, 0x41, 0x53, 0x54, 0x45, 0x4c, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x09, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f,
	0x50, 0x41, 0x53, 0x54, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0a, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f,
	0x50, 0x41, 0x53, 0x54, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x53,
	0x54, 0x45, 0x4c, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x49, 0x4e,
	0x4b, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42,
	0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10,
	0x0f, 0x2a, 0xe8, 0x01, 0x0a, 0x04, 0x45, 0x79, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x59,
	0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x43, 0x52, 0x59, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x5a, 0x5a, 0x59, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x52, 0x4f, 0x4c,
	0x4c, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x48, 0x41, 0x50, 0x50,
	0x59, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x52,
	0x54, 0x53, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x53, 0x51, 0x55, 0x49,
	0x4e, 0x54, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x52,
	0x50, 0x52, 0x49, 0x53, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x59, 0x45, 0x53,
	0x5f, 0x57, 0x49, 0x4e, 0x4b, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x59, 0x45, 0x53, 0x5f,
	0x57, 0x49, 0x4e, 0x4b, 0x5f, 0x57, 0x41, 0x43, 0x4b, 0x59, 0x10, 0x0c, 0x2a, 0x93, 0x03, 0x0a,
	0x08, 0x45, 0x79, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x59, 0x45,
	0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f,
	0x41, 0x4e, 0x47, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x59, 0x45, 0x42, 0x52,
	0x4f, 0x57, 0x53, 0x5f, 0x41, 0x4e, 0x47, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x59, 0x45,
	0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x59, 0x45, 0x42, 0x52,
	0x4f, 0x57, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x46,
	0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45,
	0x44, 0x5f, 0x45, 0x58, 0x43, 0x49, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x45,
	0x58, 0x43, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x08,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x53, 0x41, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x53, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x43, 0x45, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x0a,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x55, 0x4e, 0x49,
	0x42, 0x52, 0x4f, 0x57, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x55, 0x50, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x59, 0x45, 0x42, 0x52, 0x4f, 0x57, 0x53,
	0x5f, 0x55, 0x50, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c,
	0x10, 0x0d, 0x2a, 0xd3, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x43, 0x45, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x42, 0x45, 0x4c, 0x49, 0x45, 0x46, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x45, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x49, 0x4d, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x53, 0x41,
	0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x07,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x53, 0x4d, 0x49, 0x4c, 0x45, 0x10, 0x09,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f,
	0x54, 0x4f, 0x4e, 0x47, 0x55, 0x45, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x4b, 0x4c, 0x45, 0x10,
	0x0b, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x5f, 0x56, 0x4f, 0x4d, 0x49, 0x54, 0x10, 0x0c, 0x2a, 0xd0, 0x01, 0x0a, 0x0a, 0x53, 0x6b, 0x69,
	0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4b, 0x49, 0x4e, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x53, 0x5f, 0x54, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x53, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x53, 0x5f, 0x50, 0x41, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4b,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x53, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x53,
	0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4b, 0x49, 0x4e,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x53, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x52, 0x4f,
	0x57, 0x4e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x53, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x07, 0x2a, 0xba, 0x03, 0x0a, 0x0e,
	0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49,
	0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48,
	0x49, 0x43, 0x5f, 0x42, 0x41, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x54,
	0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x43, 0x55, 0x4d, 0x42,
	0x49, 0x41, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f,
	0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49,
	0x43, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x48,
	0x4f, 0x4c, 0x41, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53,
	0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x50, 0x49, 0x5a, 0x5a, 0x41, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x4e, 0x41, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x54,
	0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x42, 0x45, 0x41, 0x52,
	0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52,
	0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x53, 0x4b, 0x55, 0x4c, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53,
	0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x53, 0x4b, 0x55, 0x4c, 0x4c, 0x10, 0x0b,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x49, 0x43, 0x5f, 0x45, 0x53, 0x50, 0x49, 0x45, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x45,
	0x53, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x0d, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43,
	0x5f, 0x54, 0x45, 0x45, 0x54, 0x48, 0x10, 0x0e, 0x32, 0xb0, 0x01, 0x0a, 0x0d, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x10, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x0d,
	0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x1a, 0x0d, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x38, 0x0a, 0x19, 0x64,
	0x6b, 0x2e, 0x73, 0x64, 0x75, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x1b, 0x75, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6b, 0x2f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_avatar_proto_rawDescOnce sync.Once
	file_avatar_proto_rawDescData = file_avatar_proto_rawDesc
)

func file_avatar_proto_rawDescGZIP() []byte {
	file_avatar_proto_rawDescOnce.Do(func() {
		file_avatar_proto_rawDescData = protoimpl.X.CompressGZIP(file_avatar_proto_rawDescData)
	})
	return file_avatar_proto_rawDescData
}

var file_avatar_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_avatar_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_avatar_proto_goTypes = []interface{}{
	(Top)(0),                   // 0: avatar.Top
	(TopAccessory)(0),          // 1: avatar.TopAccessory
	(HairColor)(0),             // 2: avatar.HairColor
	(HatColor)(0),              // 3: avatar.HatColor
	(FacialHair)(0),            // 4: avatar.FacialHair
	(FacialHairColor)(0),       // 5: avatar.FacialHairColor
	(Clothes)(0),               // 6: avatar.Clothes
	(ColorFabric)(0),           // 7: avatar.ColorFabric
	(Eyes)(0),                  // 8: avatar.Eyes
	(Eyebrows)(0),              // 9: avatar.Eyebrows
	(MouthTypes)(0),            // 10: avatar.MouthTypes
	(SkinColors)(0),            // 11: avatar.SkinColors
	(ClothesGraphic)(0),        // 12: avatar.ClothesGraphic
	(*Avatar)(nil),             // 13: avatar.Avatar
	(*FindAvatarsRequest)(nil), // 14: avatar.FindAvatarsRequest
	(*FindAvatarsReply)(nil),   // 15: avatar.FindAvatarsReply
	(*Empty)(nil),              // 16: avatar.Empty
	nil,                        // 17: avatar.FindAvatarsReply.AvatarsEntry
}
var file_avatar_proto_depIdxs = []int32{
	0,  // 0: avatar.Avatar.top:type_name -> avatar.Top
	1,  // 1: avatar.Avatar.topAccessory:type_name -> avatar.TopAccessory
	2,  // 2: avatar.Avatar.hairColor:type_name -> avatar.HairColor
	4,  // 3: avatar.Avatar.facialHair:type_name -> avatar.FacialHair
	5,  // 4: avatar.Avatar.facialHairColor:type_name -> avatar.FacialHairColor
	6,  // 5: avatar.Avatar.clothes:type_name -> avatar.Clothes
	7,  // 6: avatar.Avatar.colorFabric:type_name -> avatar.ColorFabric
	8,  // 7: avatar.Avatar.eyes:type_name -> avatar.Eyes
	9,  // 8: avatar.Avatar.eyebrows:type_name -> avatar.Eyebrows
	10, // 9: avatar.Avatar.mouthTypes:type_name -> avatar.MouthTypes
	11, // 10: avatar.Avatar.skinColors:type_name -> avatar.SkinColors
	12, // 11: avatar.Avatar.clothesGraphic:type_name -> avatar.ClothesGraphic
	3,  // 12: avatar.Avatar.hatColor:type_name -> avatar.HatColor
	17, // 13: avatar.FindAvatarsReply.avatars:type_name -> avatar.FindAvatarsReply.AvatarsEntry
	13, // 14: avatar.FindAvatarsReply.AvatarsEntry.value:type_name -> avatar.Avatar
	16, // 15: avatar.AvatarService.RetrieveMyAvatar:input_type -> avatar.Empty
	13, // 16: avatar.AvatarService.Update:input_type -> avatar.Avatar
	14, // 17: avatar.AvatarService.FindAvatars:input_type -> avatar.FindAvatarsRequest
	13, // 18: avatar.AvatarService.RetrieveMyAvatar:output_type -> avatar.Avatar
	16, // 19: avatar.AvatarService.Update:output_type -> avatar.Empty
	15, // 20: avatar.AvatarService.FindAvatars:output_type -> avatar.FindAvatarsReply
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_avatar_proto_init() }
func file_avatar_proto_init() {
	if File_avatar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_avatar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Avatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAvatarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAvatarsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_avatar_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_avatar_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_avatar_proto_goTypes,
		DependencyIndexes: file_avatar_proto_depIdxs,
		EnumInfos:         file_avatar_proto_enumTypes,
		MessageInfos:      file_avatar_proto_msgTypes,
	}.Build()
	File_avatar_proto = out.File
	file_avatar_proto_rawDesc = nil
	file_avatar_proto_goTypes = nil
	file_avatar_proto_depIdxs = nil
}
