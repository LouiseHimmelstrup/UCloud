// automatically generated by the FlatBuffers compiler, do not modify

package ucloud

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class RegisterCall : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RegisterCall {
        __init(_i, _bb)
        return this
    }
    val reference : UShort
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val fullName : String
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                throw AssertionError("No value for (required) field fullName")
            }
        }
    val fullNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun fullNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsRegisterCall(_bb: ByteBuffer): RegisterCall = getRootAsRegisterCall(_bb, RegisterCall())
        fun getRootAsRegisterCall(_bb: ByteBuffer, obj: RegisterCall): RegisterCall {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRegisterCall(builder: FlatBufferBuilder, reference: UShort, fullNameOffset: Int) : Int {
            builder.startTable(2)
            addFullName(builder, fullNameOffset)
            addReference(builder, reference)
            return endRegisterCall(builder)
        }
        fun startRegisterCall(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addReference(builder: FlatBufferBuilder, reference: UShort) = builder.addShort(0, reference.toShort(), 0)
        fun addFullName(builder: FlatBufferBuilder, fullName: Int) = builder.addOffset(1, fullName, 0)
        fun endRegisterCall(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
                builder.required(o, 6)
            return o
        }
    }
}
