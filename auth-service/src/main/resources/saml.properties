# suppress inspection "UnusedProperty" for whole file

#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict = true

# Enable debug mode (to print errors)
onelogin.saml2.debug = true


## Service Provider Data that we are deploying ##

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = https://cloud.sdu.dk/auth
# http://localhost:8080/saml/metadata

# Specifies info about where and how the <AuthnResponse> message MUST be
# returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
onelogin.saml2.sp.assertion_consumer_service.url = https://cloud.sdu.dk/auth/saml/acs

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = https://cloud.sdu.dk/auth/saml/sls

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

# onelogin.saml2.sp.x509cert = -----BEGIN CERTIFICATE-----\
# -----END CERTIFICATE-----

# Requires Format PKCS#8   BEGIN PRIVATE KEY
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
# onelogin.saml2.sp.privatekey = -----BEGIN PRIVATE KEY-----\
# -----END PRIVATE KEY-----

## Identity Provider Data that we want connect with our SP ##

# Identifier of the IdP entity  (must be a URI)
onelogin.saml2.idp.entityid = https://testbridge.wayf.dk

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
onelogin.saml2.idp.single_sign_on_service.url = https://testbridge.wayf.dk/saml2/idp/SSOService.php

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
onelogin.saml2.idp.single_logout_service.url =

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url =

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert =-----BEGIN CERTIFICATE-----\
MIIExTCCA62gAwIBAgIDBgNbMA0GCSqGSIb3DQEBBQUAMDwxCzAJBgNVBAYTAlVTMRc\
wFQYDVQQKEw5HZW9UcnVzdCwgSW5jLjEUMBIGA1UEAxMLUmFwaWRTU0wgQ0EwHhcNMT\
IwNDA5MTMwMDA5WhcNMTcwNDEyMDAyNjQ3WjCB2TEpMCcGA1UEBRMgWWhjbmk0MDM2V\
TJHSkJPc1Jrems0NWp1dnRIUnpweW8xCzAJBgNVBAYTAkRLMRIwEAYDVQQKDAkqLndh\
eWYuZGsxEzARBgNVBAsTCkdUMjE2NTU2MTcxMTAvBgNVBAsTKFNlZSB3d3cucmFwaWR\
zc2wuY29tL3Jlc291cmNlcy9jcHMgKGMpMTIxLzAtBgNVBAsTJkRvbWFpbiBDb250cm\
9sIFZhbGlkYXRlZCAtIFJhcGlkU1NMKFIpMRIwEAYDVQQDDAkqLndheWYuZGswggEiM\
A0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCp6ny1k1GJrtfvDPWko/80wTcrXK1+\
LH+qOI9+p8s/7t5DP5gjUGpZRB4oD96qkjKPgCAf3YZlr3Cv7MYfxMCUzW0zOpPyXcb\
kXwCZkGNGwxD99p2XEm7Joflo1mC+3jw35MBu+YKC6Rarwm6etisBCdX6Tma4SYktep\
vv6FxjlOs4xaT4abWs25VWi/pNcs69Q80I5jfQxuo231tW/QBCEXFyYHnrExahsf4I2\
0SOeTJTZYrf5+2ChS0+23ANARKr3bfr4U4Vt6otgxz/OTZxZI5ydu7nCIGFDbQ1Fj29\
NJ2+am8+Jj121Mo3ZZ9N2UV+w5bWrVloJKaRyzw8O7h7AgMBAAGjggEwMIIBLDAfBgN\
VHSMEGDAWgBRraT1qGEJK3Y8CZTn9NSSGeJEWMDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR\
0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdEQQWMBSCCSoud2F5Zi5ka4IHd\
2F5Zi5kazBDBgNVHR8EPDA6MDigNqA0hjJodHRwOi8vcmFwaWRzc2wtY3JsLmdlb3Ry\
dXN0LmNvbS9jcmxzL3JhcGlkc3NsLmNybDAdBgNVHQ4EFgQUxllWoWJud4kcKh4jO3e\
s7/0zUUswDAYDVR0TAQH/BAIwADBJBggrBgEFBQcBAQQ9MDswOQYIKwYBBQUHMAKGLW\
h0dHA6Ly9yYXBpZHNzbC1haWEuZ2VvdHJ1c3QuY29tL3JhcGlkc3NsLmNydDANBgkqh\
kiG9w0BAQUFAAOCAQEArdrqkNDjX+UZmg3XYrXBCISgN/uYGlgjxwAJQgOUX9rD0o0d\
1uptrKdXR2+tk1hWoLrAdRkD6YnIPlSUkA32qRGOCY2mJlgPGpxGXXzAgEOU3GORWYk\
H1dS1O5J5Zy+yp0u4N4V67RteZnljpv8/TCnoUeNCi02qI62yB1ESJdAGljBIGrWUSP\
1wlOstd/9IhaaUfdaJKNm1l6g7dkMC3w3ibIUjEU7405s2gyQJircmUvGiSk/JTTs/S\
qsSMghy6L0PewIQirVDIAl+ac6AI2necSVH26kJwpo7WgmsHuTL+yoZkCp+iQqHnPKb\
dZVlOHXUls5U2q8sm6UCv+eI4g==\
-----END CERTIFICATE-----

# Instead of use the whole x509cert you can use a fingerprint
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint =
# onelogin.saml2.idp.certfingerprint_algorithm = sha1


## Security settings ##

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = true

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = true

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = true

# Sign the Metadata
# Empty means no signature, or comma separate the keyFileName and the certFileName
onelogin.saml2.security.want_messages_signed =

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = true

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key)
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false

# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest,
# Set comma separated values urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password
# onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
# onelogin.saml2.security.onelogin.saml2.security.requested_authncontextcomparison = exact

# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1

# Organization
onelogin.saml2.organization.name = SDU Cloud
onelogin.saml2.organization.displayname = SDU Cloud
onelogin.saml2.organization.url = https://cloud.sdu.dk
onelogin.saml2.organization.lang = en

# Contacts
onelogin.saml2.contacts.technical.given_name = Dan Sebastian Thrane
onelogin.saml2.contacts.technical.email_address = dthrane@imada.sdu.dk
# onelogin.saml2.contacts.support.given_name = Support Guy
# onelogin.saml2.contacts.support.email_address = support@example.com