// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: providers.proto

package providers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProviderServiceClient is the client API for ProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	RetrieveSpecification(ctx context.Context, in *RetrieveSpecificationRequest, opts ...grpc.CallOption) (*RetrieveSpecificationReply, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error)
	Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	UpdateAcl(ctx context.Context, in *UpdateAclRequest, opts ...grpc.CallOption) (*UpdateAclReply, error)
	BrowseConnections(ctx context.Context, in *BrowseConnectionsRequest, opts ...grpc.CallOption) (*BrowseConnectionsReply, error)
	EstablishConnection(ctx context.Context, in *EstablishConnectionRequest, opts ...grpc.CallOption) (*EstablishConnectionReply, error)
	ClearConnection(ctx context.Context, in *ClearConnectionRequest, opts ...grpc.CallOption) (*ClearConnectionReply, error)
}

type providerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServiceClient(cc grpc.ClientConnInterface) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) RetrieveSpecification(ctx context.Context, in *RetrieveSpecificationRequest, opts ...grpc.CallOption) (*RetrieveSpecificationReply, error) {
	out := new(RetrieveSpecificationReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/RetrieveSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveReply, error) {
	out := new(RetrieveReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) Browse(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseReply, error) {
	out := new(BrowseReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/Browse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) UpdateAcl(ctx context.Context, in *UpdateAclRequest, opts ...grpc.CallOption) (*UpdateAclReply, error) {
	out := new(UpdateAclReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/UpdateAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) BrowseConnections(ctx context.Context, in *BrowseConnectionsRequest, opts ...grpc.CallOption) (*BrowseConnectionsReply, error) {
	out := new(BrowseConnectionsReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/BrowseConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) EstablishConnection(ctx context.Context, in *EstablishConnectionRequest, opts ...grpc.CallOption) (*EstablishConnectionReply, error) {
	out := new(EstablishConnectionReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/EstablishConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) ClearConnection(ctx context.Context, in *ClearConnectionRequest, opts ...grpc.CallOption) (*ClearConnectionReply, error) {
	out := new(ClearConnectionReply)
	err := c.cc.Invoke(ctx, "/providers.ProviderService/ClearConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServiceServer is the server API for ProviderService service.
// All implementations must embed UnimplementedProviderServiceServer
// for forward compatibility
type ProviderServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	RetrieveSpecification(context.Context, *RetrieveSpecificationRequest) (*RetrieveSpecificationReply, error)
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error)
	Browse(context.Context, *BrowseRequest) (*BrowseReply, error)
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	UpdateAcl(context.Context, *UpdateAclRequest) (*UpdateAclReply, error)
	BrowseConnections(context.Context, *BrowseConnectionsRequest) (*BrowseConnectionsReply, error)
	EstablishConnection(context.Context, *EstablishConnectionRequest) (*EstablishConnectionReply, error)
	ClearConnection(context.Context, *ClearConnectionRequest) (*ClearConnectionReply, error)
	mustEmbedUnimplementedProviderServiceServer()
}

// UnimplementedProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServiceServer struct {
}

func (UnimplementedProviderServiceServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProviderServiceServer) RetrieveSpecification(context.Context, *RetrieveSpecificationRequest) (*RetrieveSpecificationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSpecification not implemented")
}
func (UnimplementedProviderServiceServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedProviderServiceServer) Browse(context.Context, *BrowseRequest) (*BrowseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Browse not implemented")
}
func (UnimplementedProviderServiceServer) Update(context.Context, *UpdateRequest) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProviderServiceServer) UpdateAcl(context.Context, *UpdateAclRequest) (*UpdateAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcl not implemented")
}
func (UnimplementedProviderServiceServer) BrowseConnections(context.Context, *BrowseConnectionsRequest) (*BrowseConnectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseConnections not implemented")
}
func (UnimplementedProviderServiceServer) EstablishConnection(context.Context, *EstablishConnectionRequest) (*EstablishConnectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishConnection not implemented")
}
func (UnimplementedProviderServiceServer) ClearConnection(context.Context, *ClearConnectionRequest) (*ClearConnectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearConnection not implemented")
}
func (UnimplementedProviderServiceServer) mustEmbedUnimplementedProviderServiceServer() {}

// UnsafeProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServiceServer will
// result in compilation errors.
type UnsafeProviderServiceServer interface {
	mustEmbedUnimplementedProviderServiceServer()
}

func RegisterProviderServiceServer(s grpc.ServiceRegistrar, srv ProviderServiceServer) {
	s.RegisterService(&ProviderService_ServiceDesc, srv)
}

func _ProviderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_RetrieveSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).RetrieveSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/RetrieveSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).RetrieveSpecification(ctx, req.(*RetrieveSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_Browse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).Browse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/Browse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).Browse(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_UpdateAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).UpdateAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/UpdateAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).UpdateAcl(ctx, req.(*UpdateAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_BrowseConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).BrowseConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/BrowseConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).BrowseConnections(ctx, req.(*BrowseConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_EstablishConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstablishConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).EstablishConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/EstablishConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).EstablishConnection(ctx, req.(*EstablishConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_ClearConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).ClearConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.ProviderService/ClearConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).ClearConnection(ctx, req.(*ClearConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderService_ServiceDesc is the grpc.ServiceDesc for ProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providers.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProviderService_Create_Handler,
		},
		{
			MethodName: "RetrieveSpecification",
			Handler:    _ProviderService_RetrieveSpecification_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ProviderService_Retrieve_Handler,
		},
		{
			MethodName: "Browse",
			Handler:    _ProviderService_Browse_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProviderService_Update_Handler,
		},
		{
			MethodName: "UpdateAcl",
			Handler:    _ProviderService_UpdateAcl_Handler,
		},
		{
			MethodName: "BrowseConnections",
			Handler:    _ProviderService_BrowseConnections_Handler,
		},
		{
			MethodName: "EstablishConnection",
			Handler:    _ProviderService_EstablishConnection_Handler,
		},
		{
			MethodName: "ClearConnection",
			Handler:    _ProviderService_ClearConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "providers.proto",
}
