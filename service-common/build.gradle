import java.nio.channels.*
import java.nio.file.Files

buildscript {
    ext.kotlin_version = "1.2.61"
    ext.ktor_version = "0.9.4"
    ext.dokka_version = "0.9.16"

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("1.0.0.RC9.2")
}

detekt {
    toolVersion = "1.0.0.RC9.2"
    input = files("src/main/kotlin")
    filters = ".*/resources/.*,.*/build/.*"

    // https://stackoverflow.com/a/921400
    def currentVersion = "v0.1.0"
    URL website = new URL("https://raw.githubusercontent.com/SDU-eScience/GradleBootstrap/$currentVersion/detekt.yml")
    ReadableByteChannel rbc = Channels.newChannel(website.openStream())
    def outputFile = Files.createTempFile("detekt", ".yml").toFile()
    FileOutputStream fos = new FileOutputStream(outputFile)
    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE)
    config = files(outputFile.absolutePath)
}

group "dk.sdu.cloud"
version "0.20.0-SNAPSHOT"

apply plugin: "kotlin"
apply plugin: "maven-publish"
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url "https://kotlin.bintray.com/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }

    def username = System.getenv("ESCIENCE_MVN_USER") ?: eScienceCloudUser
    def password = System.getenv("ESCIENCE_MVN_PASSWORD") ?: eScienceCloudPassword

    maven {
        url("https://cloud.sdu.dk/archiva/repository/internal")
        credentials {
            it.username(username)
            it.password(password)
        }
    }
    maven {
        url("https://cloud.sdu.dk/archiva/repository/snapshots")
        credentials {
            it.username(username)
            it.password(password)
        }
    }
}

dependencies {
// Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Kafka
    compile group: "org.apache.kafka", name: "kafka-clients", version: "1.0.0"
    compile group: "org.apache.kafka", name: "kafka-streams", version: "1.0.0"

    // Serialization
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4.1"
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.4'

    // ktor
    compile group: "io.ktor", name: "ktor-server-core", version: "$ktor_version"
    compile group: "io.ktor", name: "ktor-jackson", version: "$ktor_version"
    compile group: "io.ktor", name: "ktor-server-host-common", version: "$ktor_version"

    // db
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.2.Final'
    compile group: 'org.hibernate', name: 'hibernate-hikaricp', version: '5.3.2.Final'
    compile 'org.flywaydb:flyway-core:5.1.4'

    compile 'eu.infomas:annotation-detector:3.0.5'
    
    // Client
    compile group: 'org.asynchttpclient', name: 'async-http-client', version: '2.4.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.9.2'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5'

    compile "io.ktor:ktor-client-core:0.9.4"
    compile "io.ktor:ktor-client-apache:0.9.4"
    compile "io.ktor:ktor-client-json:0.9.4"
    compile "io.ktor:ktor-client-json-jvm:0.9.4"
    compile 'io.ktor:ktor-client-jackson:0.9.4'

    // Service discovery
    compile group: "com.github.zafarkhaja", name: "java-semver", version: "0.9.0"

    // JWTs
    compile "com.auth0:java-jwt:3.3.0"

    // Testing
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'
    testCompile "io.ktor:ktor-server-test-host:$ktor_version"
    testCompile "io.mockk:mockk:1.8"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacocoTestReport {
    reports {
        xml {
            enabled true // coveralls plugin depends on xml format report
        }

        html {
            enabled true
        }
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)

kotlin {
    experimental {
        coroutines "enable"
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }

    // For this to work you should create a file at ~/.gradle/gradle.properties
    // This file should contain the configuration for the repository, user, and password.
    //
    // Example:
    // eScienceCloudUser=admin
    // eScienceCloudPassword=qwer
    //


    def username = System.getenv("ESCIENCE_MVN_USER") ?: eScienceCloudUser
    def password = System.getenv("ESCIENCE_MVN_PASSWORD") ?: eScienceCloudPassword

    repositories {
        maven {
            def resolvedUrl = "https://cloud.sdu.dk/archiva/repository/"
            if (project.version.endsWith("-SNAPSHOT")) resolvedUrl += "snapshots"
            else resolvedUrl += "internal"
            url(resolvedUrl)

            credentials {
                it.username(username)
                it.password(password)
            }
        }
    }
}



