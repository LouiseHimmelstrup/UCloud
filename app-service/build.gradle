group 'dk.sdu.cloud'
version '0.2.0'

buildscript {
    ext.kotlin_version = '1.2.10'
    ext.ktor_version = '0.9.1-alpha-8'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'application'

sourceCompatibility = 1.8
mainClassName = "dk.sdu.cloud.app.ApplicationStreamProcessorKt"

repositories {
    mavenCentral()

    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }

    maven {
        url("https://cloud.sdu.dk/archiva/repository/snapshots")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }

    maven {
        url("https://cloud.sdu.dk/archiva/repository/internal")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }

    maven { url "https://dl.bintray.com/tus/maven" }

    // Repositories required for iRODS to work
    maven { url "https://raw.github.com/DICE-UNC/DICE-Maven/master/releases" }
    maven { url "http://ci-dev.renci.org/nexus/content/repositories/public" }
    maven { url "http://download.osgeo.org/webdav/geotools" }
    maven { url "https://dl.bintray.com/kotlin/exposed" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // ------------
    // iRODS
    // ------------
    compile "dk.sdu.cloud:cloud-storage:0.5.0-SNAPSHOT"

    // ------------
    // Logging
    // ------------
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'

    // ------------
    // ktor
    // ------------
    compile group: 'io.ktor', name: 'ktor-server-cio', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-jackson', version: "$ktor_version"

    // ------------
    // SSH/SCP
    // ------------
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'

    // ------------
    // sbatch
    // ------------
    compile 'com.google.guava:guava:23.4-jre'

    compile 'dk.sdu.cloud:client-core:0.1.0-SNAPSHOT'
    compile 'dk.sdu.cloud:service-common:0.5.0-SNAPSHOT'
    compile "dk.sdu.cloud:auth-api:1.0.0-SNAPSHOT"

    // Tus
    compile "dk.sdu.cloud:tus-api-internal:1.0.0-SNAPSHOT"

    compile 'org.jetbrains.exposed:exposed:0.9.1'
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    generated {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath

        kotlin {
            srcDir 'src/generated/kotlin'
        }

        resources {
            srcDir 'src/generated/resources'
        }
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

jar {
    from sourceSets.generated.output
}

task cleanGenerated() {
    File outputDir = file("src/generated")
    outputDir.absolutePath
    outputDir.deleteDir()
}
clean.dependsOn(cleanGenerated)

task generateBuildConfig() {
    File outputDir = file("src/generated/kotlin")
    if (!outputDir.exists()) outputDir.mkdirs()

    String simpleName = project.name.replace("-service", "")

    String packageName = "${project.group}.${simpleName}.api"
    File packagePath = file("$outputDir/${packageName.replace('.', '/')}")
    if (!packagePath.exists()) packagePath.mkdirs()

    String className = "${simpleName.capitalize()}ServiceDescription"
    File configFile = file("$packagePath/${className}.kt")
    configFile.delete()
    configFile << """
        package $packageName

        import dk.sdu.cloud.client.ServiceDescription

        object $className : ServiceDescription {
            override val name: String = "${project.name.replace("-service", "")}"
            override val version: String = "${project.version}"
        }
    """.stripIndent().trim()
}
compileKotlin.dependsOn(generateBuildConfig)

task generateServiceManifest() {
    def outputDir = file("src/generated/resources")
    if (!outputDir.exists()) outputDir.mkdirs()
    def manifestFile = file("$outputDir/service_manifest.json")
    manifestFile.delete()
    manifestFile << """
        {
            "name": "${project.name.replace("-service", "")}",
            "version": "${project.version}"
        }
    """.stripIndent().trim()
}

task apiJar(type: Jar) {
    baseName project.name + '-api'
    from sourceSets.main.output
    from sourceSets.generated.output
    include("**/dk/sdu/cloud/**/api/**", "service_manifest.json")
    with jar
}

apiJar.dependsOn(generateServiceManifest)
