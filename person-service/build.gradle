group 'dk.sdu.cloud'
version '1.0.0-SNAPSHOT' // Must be a valid SemVer

buildscript {
    ext.kotlin_version = '1.2.10'
    ext.ktor_version = '0.9.1-alpha-8'
    ext.dokka_version = '0.9.15'
    ext.log4j_version = '2.10.0'
    ext.exposed_version = '0.9.1'
    ext.logback_version = '1.2.3'
    ext.postgresql_version = '42.1.4'
    ext.slf4j_version = '1.7.25'
    ext.jvm_target = '1.8'

    ext.cloud_common_version = "0.5.0-SNAPSHOT"
    ext.cloud_auth_version = "1.0.0-SNAPSHOT"

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'maven-publish'

sourceCompatibility = "$jvm_target"
mainClassName = "dk.sdu.cloud.person.MainKt" // Note the "Kt" suffix

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
    includes = ["docs/services.md"]
}

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/exposed" }
    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }

    ["snapshots", "internal"].each { name ->
        maven {
            url("https://cloud.sdu.dk/archiva/repository/$name")
            credentials {
                username(eScienceCloudUser)
                password(eScienceCloudPassword)
            }
        }
    }
}

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "$log4j_version"
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "$log4j_version"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$log4j_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.exposed:exposed:$exposed_version"
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-jackson:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile group: 'org.postgresql', name: 'postgresql', version: "$postgresql_version"

    compile group: "dk.sdu.cloud", name: "service-common", version: cloud_common_version
    compile group: "dk.sdu.cloud", name: "auth-api", version: cloud_auth_version
}

compileKotlin {
    kotlinOptions.jvmTarget = "$jvm_target"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "$jvm_target"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

// TODO THIS SHOULD BE EXTRACTED INTO A PLUGIN
// TODO THIS SHOULD BE EXTRACTED INTO A PLUGIN
// TODO THIS SHOULD BE EXTRACTED INTO A PLUGIN
publishing {
    publications {
        api(MavenPublication) {
            groupId(project.group)
            artifactId(project.name.replace("-service", "") + "-api")
            artifact apiJar
        }
    }

    repositories {
        maven {
            def resolvedUrl = "https://cloud.sdu.dk/archiva/repository/"
            if (project.version.endsWith("-SNAPSHOT")) resolvedUrl += "snapshots"
            else resolvedUrl += "internal"
            url(resolvedUrl)
            credentials {
                username(eScienceCloudUser)
                password(eScienceCloudPassword)
            }
        }
    }
}

sourceSets {
    generated {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath

        kotlin {
            srcDir 'src/generated/kotlin'
        }

        resources {
            srcDir 'src/generated/resources'
        }
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

jar {
    from sourceSets.generated.output
}

task cleanGenerated() {
    File outputDir = file("src/generated")
    outputDir.absolutePath
    outputDir.deleteDir()
}
clean.dependsOn(cleanGenerated)

task generateBuildConfig() {
    File outputDir = file("src/generated/kotlin")
    if (!outputDir.exists()) outputDir.mkdirs()

    String simpleName = project.name.replace("-service", "")

    String packageName = "${project.group}.${simpleName}.api"
    File packagePath = file("$outputDir/${packageName.replace('.', '/')}")
    if (!packagePath.exists()) packagePath.mkdirs()

    String className = "${simpleName.capitalize()}ServiceDescription"
    File configFile = file("$packagePath/${className}.kt")
    configFile.delete()
    configFile << """
        package $packageName

        import dk.sdu.cloud.client.ServiceDescription

        object $className : ServiceDescription {
            override val name: String = "${project.name.replace("-service", "")}"
            override val version: String = "${project.version}"
        }
    """.stripIndent().trim()
}
compileKotlin.dependsOn(generateBuildConfig)

task generateServiceManifest() {
    def outputDir = file("src/generated/resources")
    if (!outputDir.exists()) outputDir.mkdirs()
    def manifestFile = file("$outputDir/service_manifest.json")
    manifestFile.delete()
    manifestFile << """
        {
            "name": "${project.name.replace("-service", "")}",
            "version": "${project.version}"
        }
    """.stripIndent().trim()
}

task apiJar(type: Jar) {
    baseName project.name + '-api'
    from sourceSets.main.output
    from sourceSets.generated.output
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    String simpleName = project.name.replace("-service", "")
    String packageName = "${project.group}.${simpleName}.api"
    String folderName = packageName.replace('.', '/')
    include("**/$folderName/**", "service_manifest.json")

    // without this several kotlin features will not work (including extension functions)
    include("META-INF/**/${project.name}.kotlin_module")
    with jar
}
apiJar.dependsOn(generateServiceManifest)
// TODO THIS SHOULD BE EXTRACTED INTO A PLUGIN
// TODO THIS SHOULD BE EXTRACTED INTO A PLUGIN
// TODO THIS SHOULD BE EXTRACTED INTO A PLUGIN
