// automatically generated by the FlatBuffers compiler, do not modify

package ucloud

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class RegisterProjectRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RegisterProjectRequest {
        __init(_i, _bb)
        return this
    }
    val reference : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    val projectId : String
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                throw AssertionError("No value for (required) field projectId")
            }
        }
    val projectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun projectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_3_3()
        fun getRootAsRegisterProjectRequest(_bb: ByteBuffer): RegisterProjectRequest = getRootAsRegisterProjectRequest(_bb, RegisterProjectRequest())
        fun getRootAsRegisterProjectRequest(_bb: ByteBuffer, obj: RegisterProjectRequest): RegisterProjectRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRegisterProjectRequest(builder: FlatBufferBuilder, reference: UByte, projectIdOffset: Int) : Int {
            builder.startTable(2)
            addProjectId(builder, projectIdOffset)
            addReference(builder, reference)
            return endRegisterProjectRequest(builder)
        }
        fun startRegisterProjectRequest(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addReference(builder: FlatBufferBuilder, reference: UByte) = builder.addByte(0, reference.toByte(), 0)
        fun addProjectId(builder: FlatBufferBuilder, projectId: Int) = builder.addOffset(1, projectId, 0)
        fun endRegisterProjectRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
                builder.required(o, 6)
            return o
        }
    }
}
