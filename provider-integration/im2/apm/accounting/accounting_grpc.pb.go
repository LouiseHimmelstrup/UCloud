// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: accounting.proto

package accounting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingServiceClient interface {
	RootAllocate(ctx context.Context, in *RootAllocateRequest, opts ...grpc.CallOption) (*RootAllocateReply, error)
	UpdateAllocations(ctx context.Context, in *UpdateAllocationsRequest, opts ...grpc.CallOption) (*UpdateAllocationsReply, error)
	QueryAllocations(ctx context.Context, in *QueryAllocationsRequest, opts ...grpc.CallOption) (*QueryAllocationsReply, error)
	ReportUsage(ctx context.Context, in *ReportUsageRequest, opts ...grpc.CallOption) (*ReportUsageReply, error)
	QueryProviders(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersReply, error)
	RetrieveCharts(ctx context.Context, in *RetrieveChartsRequest, opts ...grpc.CallOption) (*Charts, error)
	CreateProducts(ctx context.Context, in *CreateProductsRequest, opts ...grpc.CallOption) (*CreateProductsReply, error)
	RetrieveProduct(ctx context.Context, in *ProductReference, opts ...grpc.CallOption) (*Product, error)
	BrowseProducts(ctx context.Context, in *BrowseProductsRequest, opts ...grpc.CallOption) (*BrowseProductsReply, error)
	FetchNewAllocations(ctx context.Context, in *FetchNewAllocationsRequest, opts ...grpc.CallOption) (*FetchNewAllocationsReply, error)
	MarkAllocationsAsHandled(ctx context.Context, in *MarkAllocationsAsHandledRequest, opts ...grpc.CallOption) (*MarkAllocationsAsHandledReply, error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) RootAllocate(ctx context.Context, in *RootAllocateRequest, opts ...grpc.CallOption) (*RootAllocateReply, error) {
	out := new(RootAllocateReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/RootAllocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) UpdateAllocations(ctx context.Context, in *UpdateAllocationsRequest, opts ...grpc.CallOption) (*UpdateAllocationsReply, error) {
	out := new(UpdateAllocationsReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/UpdateAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) QueryAllocations(ctx context.Context, in *QueryAllocationsRequest, opts ...grpc.CallOption) (*QueryAllocationsReply, error) {
	out := new(QueryAllocationsReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/QueryAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) ReportUsage(ctx context.Context, in *ReportUsageRequest, opts ...grpc.CallOption) (*ReportUsageReply, error) {
	out := new(ReportUsageReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/ReportUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) QueryProviders(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersReply, error) {
	out := new(QueryProvidersReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/QueryProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) RetrieveCharts(ctx context.Context, in *RetrieveChartsRequest, opts ...grpc.CallOption) (*Charts, error) {
	out := new(Charts)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/RetrieveCharts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) CreateProducts(ctx context.Context, in *CreateProductsRequest, opts ...grpc.CallOption) (*CreateProductsReply, error) {
	out := new(CreateProductsReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/CreateProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) RetrieveProduct(ctx context.Context, in *ProductReference, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/RetrieveProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) BrowseProducts(ctx context.Context, in *BrowseProductsRequest, opts ...grpc.CallOption) (*BrowseProductsReply, error) {
	out := new(BrowseProductsReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/BrowseProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) FetchNewAllocations(ctx context.Context, in *FetchNewAllocationsRequest, opts ...grpc.CallOption) (*FetchNewAllocationsReply, error) {
	out := new(FetchNewAllocationsReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/FetchNewAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) MarkAllocationsAsHandled(ctx context.Context, in *MarkAllocationsAsHandledRequest, opts ...grpc.CallOption) (*MarkAllocationsAsHandledReply, error) {
	out := new(MarkAllocationsAsHandledReply)
	err := c.cc.Invoke(ctx, "/accounting.AccountingService/MarkAllocationsAsHandled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility
type AccountingServiceServer interface {
	RootAllocate(context.Context, *RootAllocateRequest) (*RootAllocateReply, error)
	UpdateAllocations(context.Context, *UpdateAllocationsRequest) (*UpdateAllocationsReply, error)
	QueryAllocations(context.Context, *QueryAllocationsRequest) (*QueryAllocationsReply, error)
	ReportUsage(context.Context, *ReportUsageRequest) (*ReportUsageReply, error)
	QueryProviders(context.Context, *QueryProvidersRequest) (*QueryProvidersReply, error)
	RetrieveCharts(context.Context, *RetrieveChartsRequest) (*Charts, error)
	CreateProducts(context.Context, *CreateProductsRequest) (*CreateProductsReply, error)
	RetrieveProduct(context.Context, *ProductReference) (*Product, error)
	BrowseProducts(context.Context, *BrowseProductsRequest) (*BrowseProductsReply, error)
	FetchNewAllocations(context.Context, *FetchNewAllocationsRequest) (*FetchNewAllocationsReply, error)
	MarkAllocationsAsHandled(context.Context, *MarkAllocationsAsHandledRequest) (*MarkAllocationsAsHandledReply, error)
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountingServiceServer struct {
}

func (UnimplementedAccountingServiceServer) RootAllocate(context.Context, *RootAllocateRequest) (*RootAllocateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootAllocate not implemented")
}
func (UnimplementedAccountingServiceServer) UpdateAllocations(context.Context, *UpdateAllocationsRequest) (*UpdateAllocationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllocations not implemented")
}
func (UnimplementedAccountingServiceServer) QueryAllocations(context.Context, *QueryAllocationsRequest) (*QueryAllocationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllocations not implemented")
}
func (UnimplementedAccountingServiceServer) ReportUsage(context.Context, *ReportUsageRequest) (*ReportUsageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUsage not implemented")
}
func (UnimplementedAccountingServiceServer) QueryProviders(context.Context, *QueryProvidersRequest) (*QueryProvidersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProviders not implemented")
}
func (UnimplementedAccountingServiceServer) RetrieveCharts(context.Context, *RetrieveChartsRequest) (*Charts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCharts not implemented")
}
func (UnimplementedAccountingServiceServer) CreateProducts(context.Context, *CreateProductsRequest) (*CreateProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProducts not implemented")
}
func (UnimplementedAccountingServiceServer) RetrieveProduct(context.Context, *ProductReference) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveProduct not implemented")
}
func (UnimplementedAccountingServiceServer) BrowseProducts(context.Context, *BrowseProductsRequest) (*BrowseProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseProducts not implemented")
}
func (UnimplementedAccountingServiceServer) FetchNewAllocations(context.Context, *FetchNewAllocationsRequest) (*FetchNewAllocationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNewAllocations not implemented")
}
func (UnimplementedAccountingServiceServer) MarkAllocationsAsHandled(context.Context, *MarkAllocationsAsHandledRequest) (*MarkAllocationsAsHandledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllocationsAsHandled not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_RootAllocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootAllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).RootAllocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/RootAllocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).RootAllocate(ctx, req.(*RootAllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_UpdateAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).UpdateAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/UpdateAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).UpdateAllocations(ctx, req.(*UpdateAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_QueryAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).QueryAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/QueryAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).QueryAllocations(ctx, req.(*QueryAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_ReportUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).ReportUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/ReportUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).ReportUsage(ctx, req.(*ReportUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_QueryProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).QueryProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/QueryProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).QueryProviders(ctx, req.(*QueryProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_RetrieveCharts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveChartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).RetrieveCharts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/RetrieveCharts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).RetrieveCharts(ctx, req.(*RetrieveChartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_CreateProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CreateProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/CreateProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CreateProducts(ctx, req.(*CreateProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_RetrieveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).RetrieveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/RetrieveProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).RetrieveProduct(ctx, req.(*ProductReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_BrowseProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).BrowseProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/BrowseProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).BrowseProducts(ctx, req.(*BrowseProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_FetchNewAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNewAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).FetchNewAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/FetchNewAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).FetchNewAllocations(ctx, req.(*FetchNewAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_MarkAllocationsAsHandled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAllocationsAsHandledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).MarkAllocationsAsHandled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accounting.AccountingService/MarkAllocationsAsHandled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).MarkAllocationsAsHandled(ctx, req.(*MarkAllocationsAsHandledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RootAllocate",
			Handler:    _AccountingService_RootAllocate_Handler,
		},
		{
			MethodName: "UpdateAllocations",
			Handler:    _AccountingService_UpdateAllocations_Handler,
		},
		{
			MethodName: "QueryAllocations",
			Handler:    _AccountingService_QueryAllocations_Handler,
		},
		{
			MethodName: "ReportUsage",
			Handler:    _AccountingService_ReportUsage_Handler,
		},
		{
			MethodName: "QueryProviders",
			Handler:    _AccountingService_QueryProviders_Handler,
		},
		{
			MethodName: "RetrieveCharts",
			Handler:    _AccountingService_RetrieveCharts_Handler,
		},
		{
			MethodName: "CreateProducts",
			Handler:    _AccountingService_CreateProducts_Handler,
		},
		{
			MethodName: "RetrieveProduct",
			Handler:    _AccountingService_RetrieveProduct_Handler,
		},
		{
			MethodName: "BrowseProducts",
			Handler:    _AccountingService_BrowseProducts_Handler,
		},
		{
			MethodName: "FetchNewAllocations",
			Handler:    _AccountingService_FetchNewAllocations_Handler,
		},
		{
			MethodName: "MarkAllocationsAsHandled",
			Handler:    _AccountingService_MarkAllocationsAsHandled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting.proto",
}
