// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RequestHeader {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestHeader {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestHeader(bb:flatbuffers.ByteBuffer, obj?:RequestHeader):RequestHeader {
  return (obj || new RequestHeader()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestHeader(bb:flatbuffers.ByteBuffer, obj?:RequestHeader):RequestHeader {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestHeader()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

call():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

stream():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

project():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startRequestHeader(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCall(builder:flatbuffers.Builder, call:number) {
  builder.addFieldInt16(0, call, 0);
}

static addStream(builder:flatbuffers.Builder, stream:number) {
  builder.addFieldInt16(1, stream, 0);
}

static addProject(builder:flatbuffers.Builder, project:number) {
  builder.addFieldInt8(2, project, 0);
}

static endRequestHeader(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestHeader(builder:flatbuffers.Builder, call:number, stream:number, project:number):flatbuffers.Offset {
  RequestHeader.startRequestHeader(builder);
  RequestHeader.addCall(builder, call);
  RequestHeader.addStream(builder, stream);
  RequestHeader.addProject(builder, project);
  return RequestHeader.endRequestHeader(builder);
}
}
