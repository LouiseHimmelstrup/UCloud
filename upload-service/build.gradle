group 'dk.sdu.cloud'
version '1.0.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.21'
    ext.ktor_version = '0.9.1'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'maven-publish'

mainClassName = "dk.sdu.cloud.tus.MainKt"

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/exposed" }
    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/tus/maven" }
    maven {
        url("https://cloud.sdu.dk/archiva/repository/internal")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }
    maven {
        url("https://cloud.sdu.dk/archiva/repository/snapshots")
        credentials {
            username(eScienceCloudUser)
            password(eScienceCloudPassword)
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    compile files("libs/rados-0.4.0-SNAPSHOT.jar")
    compile group: 'net.java.dev.jna', name: 'jna', version: '4.5.0'
    compile 'io.tus.java.client:tus-java-client:0.3.1' // TODO THIS IS HARDCODED AS A DEP IN API
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'

    compile group: 'io.ktor', name: 'ktor-server-core', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-server-cio', version: "$ktor_version"
    compile group: 'io.ktor', name: 'ktor-jackson', version: "$ktor_version"

    compile 'org.jetbrains.exposed:exposed:0.9.1'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.9.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.9.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.9.1'

    compile "dk.sdu.cloud:service-common:0.6.0-SNAPSHOT"
    compile "dk.sdu.cloud:auth-api:1.0.0-SNAPSHOT"

    testCompile "junit:junit:4.12"
    testCompile "io.mockk:mockk:1.6.3"
    testCompile group: 'io.ktor', name: 'ktor-server-tests', version: "$ktor_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

publishing {
    publications {
        api(MavenPublication) {
            groupId(project.group)
            artifactId(project.name.replace("-service", "") + "-api")
            artifact apiJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // TODO THIS SHOULD NOT BE HARDCODED
                def tusDepNode = dependenciesNode.appendNode("dependency")
                tusDepNode.appendNode("groupId", "io.tus.java.client")
                tusDepNode.appendNode("artifactId", "tus-java-client")
                tusDepNode.appendNode("version", "0.3.1")
            }
        }

        apiInternal(MavenPublication) { // TODO Maybe don't copy and paste or at least find a solution to deps
            groupId(project.group)
            artifactId(project.name.replace("-service", "") + "-api-internal")
            artifact apiInternalJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // TODO THIS SHOULD NOT BE HARDCODED
                def tusDepNode = dependenciesNode.appendNode("dependency")
                tusDepNode.appendNode("groupId", "io.tus.java.client")
                tusDepNode.appendNode("artifactId", "tus-java-client")
                tusDepNode.appendNode("version", "0.3.1")
            }
        }
    }

    repositories {
        maven {
            def resolvedUrl = "https://cloud.sdu.dk/archiva/repository/"
            if (project.version.endsWith("-SNAPSHOT")) resolvedUrl += "snapshots"
            else resolvedUrl += "internal"
            url(resolvedUrl)
            credentials {
                username(eScienceCloudUser)
                password(eScienceCloudPassword)
            }
        }
    }
}

sourceSets {
    generated {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath

        kotlin {
            srcDir 'src/generated/kotlin'
        }

        resources {
            srcDir 'src/generated/resources'
        }
    }

    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

jar {
    from sourceSets.generated.output
}

task cleanGenerated() {
    File outputDir = file("src/generated")
    outputDir.absolutePath
    outputDir.deleteDir()
}
clean.dependsOn(cleanGenerated)

task generateBuildConfig() {
    File outputDir = file("src/generated/kotlin")
    if (!outputDir.exists()) outputDir.mkdirs()

    String simpleName = project.name.replace("-service", "")

    String packageName = "${project.group}.${simpleName}.api"
    File packagePath = file("$outputDir/${packageName.replace('.', '/')}")
    if (!packagePath.exists()) packagePath.mkdirs()

    String className = "${simpleName.capitalize()}ServiceDescription"
    File configFile = file("$packagePath/${className}.kt")
    configFile.delete()
    configFile << """
        package $packageName

        import dk.sdu.cloud.client.ServiceDescription

        object $className : ServiceDescription {
            override val name: String = "${project.name.replace("-service", "")}"
            override val version: String = "${project.version}"
        }
    """.stripIndent().trim()
}
compileKotlin.dependsOn(generateBuildConfig)

task generateServiceManifest() {
    def outputDir = file("src/generated/resources")
    if (!outputDir.exists()) outputDir.mkdirs()
    def manifestFile = file("$outputDir/service_manifest.json")
    manifestFile.delete()
    manifestFile << """
        {
            "name": "${project.name.replace("-service", "")}",
            "version": "${project.version}"
        }
    """.stripIndent().trim()
}

task apiJar(type: Jar) {
    baseName project.name + '-api'
    from sourceSets.main.output
    from sourceSets.generated.output
    include("**/dk/sdu/cloud/tus/api/*", "service_manifest.json", "META-INF/${project.name}.kotlin_module")
    with jar
}

task apiInternalJar(type: Jar) {
    with apiJar

    baseName project.name + '-api-internal'
    include("**/dk/sdu/cloud/tus/api/internal/*")
}

apiJar.dependsOn(generateServiceManifest)
