// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class RegisterCall {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RegisterCall {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegisterCall(bb:flatbuffers.ByteBuffer, obj?:RegisterCall):RegisterCall {
  return (obj || new RegisterCall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegisterCall(bb:flatbuffers.ByteBuffer, obj?:RegisterCall):RegisterCall {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RegisterCall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

reference():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

fullName():string|null
fullName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
fullName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRegisterCall(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addReference(builder:flatbuffers.Builder, reference:number) {
  builder.addFieldInt16(0, reference, 0);
}

static addFullName(builder:flatbuffers.Builder, fullNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fullNameOffset, 0);
}

static endRegisterCall(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // full_name
  return offset;
}

static createRegisterCall(builder:flatbuffers.Builder, reference:number, fullNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  RegisterCall.startRegisterCall(builder);
  RegisterCall.addReference(builder, reference);
  RegisterCall.addFullName(builder, fullNameOffset);
  return RegisterCall.endRegisterCall(builder);
}
}
